<!-- views/admin/exams.ejs -->
<%- include('../layouts/admin-layout', { title: title }) %>

<div class="admin-exams">
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold text-gray-800">Exam Management</h1>
      <div class="flex space-x-4">
        <div class="relative">
          <select id="certification-filter" class="form-select pr-10">
            <option value="">All Certifications</option>
            <% certifications.forEach(cert => { %>
              <option value="<%= cert._id %>" <%= selectedCertification === cert._id.toString() ? 'selected' : '' %>>
                <%= cert.name %> (<%= cert.code %>)
              </option>
            <% }); %>
          </select>
        </div>
        <button id="add-exam" class="btn btn-primary">
          <i class="fas fa-plus mr-2"></i> Create Exam
        </button>
      </div>
    </div>

    <!-- Exams Table -->
    <div class="card">
      <div class="card-body p-0">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr>
                <th class="th-cell">Exam Name</th>
                <th class="th-cell">Certification</th>
                <th class="th-cell">Questions</th>
                <th class="th-cell">Time Limit</th>
                <th class="th-cell">Settings</th>
                <th class="th-cell">Status</th>
                <th class="th-cell">Created</th>
                <th class="th-cell">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (exams && exams.length > 0) { %>
                <% exams.forEach(exam => { %>
                  <tr class="hover:bg-gray-50 border-b border-gray-200">
                    <td class="td-cell font-medium text-gray-900">
                      <%= exam.name %>
                    </td>
                    <td class="td-cell">
                      <span class="cert-badge"><%= exam.certificationId.code %></span>
                    </td>
                    <td class="td-cell">
                      <div class="flex items-center">
                        <span class="text-gray-900"><%= exam.questionCount %></span>
                      </div>
                    </td>
                    <td class="td-cell">
                      <%= exam.timeLimit ? `${exam.timeLimit} min` : 'Default' %>
                    </td>
                    <td class="td-cell">
                      <div class="flex flex-col space-y-1">
                        <div class="flex items-center text-xs">
                          <span class="mr-2">Randomize:</span>
                          <span class="<%= exam.randomize ? 'text-green-600' : 'text-gray-500' %>">
                            <i class="fas <%= exam.randomize ? 'fa-check-circle' : 'fa-times-circle' %>"></i>
                          </span>
                        </div>
                        <div class="flex items-center text-xs">
                          <span class="mr-2">Show Results:</span>
                          <span class="<%= exam.showResults ? 'text-green-600' : 'text-gray-500' %>">
                            <i class="fas <%= exam.showResults ? 'fa-check-circle' : 'fa-times-circle' %>"></i>
                          </span>
                        </div>
                      </div>
                    </td>
                    <td class="td-cell">
                      <span class="status-badge <%= exam.active ? 'active' : 'inactive' %>">
                        <%= exam.active ? 'Active' : 'Inactive' %>
                      </span>
                    </td>
                    <td class="td-cell text-gray-500">
                      <div><%= new Date(exam.createdAt).toLocaleDateString() %></div>
                      <div class="text-xs">by <%= exam.createdBy ? exam.createdBy.username : 'System' %></div>
                    </td>
                    <td class="td-cell">
                      <div class="flex space-x-2">
                        <button class="action-btn edit-exam" data-id="<%= exam._id %>" title="Edit">
                          <i class="fas fa-edit"></i>
                        </button>
                        <button class="action-btn duplicate-exam" data-id="<%= exam._id %>" title="Duplicate">
                          <i class="fas fa-copy"></i>
                        </button>
                        <button class="action-btn toggle-status" 
                                data-id="<%= exam._id %>" 
                                data-active="<%= exam.active %>"
                                title="<%= exam.active ? 'Deactivate' : 'Activate' %>">
                          <i class="fas <%= exam.active ? 'fa-toggle-on text-green-600' : 'fa-toggle-off text-gray-400' %>"></i>
                        </button>
                        <button class="action-btn delete-exam" data-id="<%= exam._id %>" title="Delete">
                          <i class="fas fa-trash text-red-500"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="8" class="py-8 text-center text-gray-500">
                    <% if (selectedCertification) { %>
                      No exams found for this certification
                    <% } else { %>
                      No exams found
                    <% } %>
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Exam Modal -->
<div id="exam-modal" class="modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-container">
    <div class="modal-header">
      <h2 id="modal-title">Create New Exam</h2>
      <button id="close-modal" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <form id="exam-form">
        <input type="hidden" id="exam-id" name="id">
        
        <div class="form-group">
          <label for="exam-certification" class="form-label required">Certification</label>
          <select id="exam-certification" name="certificationId" class="form-select" required>
            <option value="">Select Certification</option>
            <% certifications.forEach(cert => { %>
              <option value="<%= cert._id %>"><%= cert.name %> (<%= cert.code %>)</option>
            <% }); %>
          </select>
          <div id="certification-info" class="mt-2 text-xs text-gray-500 hidden">
            <span id="certification-time"></span>
            <span id="certification-questions"></span>
          </div>
        </div>
        
        <div class="form-group">
          <label for="exam-name" class="form-label required">Exam Name</label>
          <input type="text" id="exam-name" name="name" class="form-input" 
                 placeholder="e.g. Practice Exam 1" required>
        </div>
        
        <div class="form-group">
          <label for="exam-description" class="form-label">Description</label>
          <textarea id="exam-description" name="description" class="form-textarea" rows="3" 
                    placeholder="Describe the exam content or purpose..."></textarea>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="form-group">
            <label for="exam-question-count" class="form-label required">Number of Questions</label>
            <input type="number" id="exam-question-count" name="questionCount" class="form-input" 
                   min="1" max="500" value="65" required>
            <div id="question-count-warning" class="mt-1 text-xs text-red-500 hidden">
              Warning: Not enough questions available in this certification.
            </div>
          </div>
          
          <div class="form-group">
            <label for="exam-time-limit" class="form-label">Time Limit (minutes)</label>
            <input type="number" id="exam-time-limit" name="timeLimit" class="form-input" 
                   min="1" max="1440" placeholder="Leave empty to use certification default">
            <div class="mt-1 text-xs text-gray-500">
              Leave empty to use certification's default time limit
            </div>
          </div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-2">
          <div class="form-group">
            <div class="flex items-center">
              <input type="checkbox" id="exam-randomize" name="randomize" class="form-checkbox" checked>
              <label for="exam-randomize" class="ml-2 text-sm text-gray-700">
                Randomize question order
              </label>
            </div>
          </div>
          
          <div class="form-group">
            <div class="flex items-center">
              <input type="checkbox" id="exam-show-results" name="showResults" class="form-checkbox" checked>
              <label for="exam-show-results" class="ml-2 text-sm text-gray-700">
                Show results immediately after submission
              </label>
            </div>
          </div>
        </div>
      </form>
    </div>
    <div class="modal-footer">
      <button id="save-exam" class="btn btn-primary">Save Exam</button>
      <button id="cancel-exam" class="btn btn-outline">Cancel</button>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-container max-w-md">
    <div class="modal-header">
      <h2>Confirm Deletion</h2>
      <button id="close-delete-modal" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <p class="text-gray-700">Are you sure you want to delete this exam? This action cannot be undone.</p>
      <div id="delete-warning" class="mt-4 hidden">
        <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <i class="fas fa-exclamation-triangle text-yellow-400"></i>
            </div>
            <div class="ml-3">
              <p class="text-sm text-yellow-700">
                This exam has existing attempts. It will be deactivated instead of permanently deleted.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <button id="confirm-delete" class="btn btn-danger">Delete Exam</button>
      <button id="cancel-delete" class="btn btn-outline">Cancel</button>
    </div>
  </div>
</div>

<!-- Custom Styles -->
<style>
  .card {
    @apply bg-white rounded-lg shadow-md overflow-hidden;
  }
  
  .card-body {
    @apply p-6;
  }
  
  .form-group {
    @apply mb-4;
  }
  
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  
  .form-label.required::after {
    content: "*";
    @apply text-red-500 ml-1;
  }
  
  .form-input, .form-select, .form-textarea {
    @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm;
  }
  
  .form-checkbox {
    @apply rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-500 focus:ring-blue-500;
  }
  
  .btn {
    @apply inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
  }
  
  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700;
  }
  
  .btn-danger {
    @apply bg-red-600 text-white hover:bg-red-700;
  }
  
  .btn-outline {
    @apply bg-white text-gray-700 border-gray-300 hover:bg-gray-50;
  }
  
  .modal {
    @apply fixed inset-0 z-50 overflow-y-auto;
  }
  
  .modal-overlay {
    @apply fixed inset-0 bg-black bg-opacity-50;
  }
  
  .modal-container {
    @apply bg-white rounded-lg shadow-xl mx-auto my-8 max-w-4xl max-h-full overflow-hidden relative;
  }
  
  .modal-header {
    @apply px-6 py-4 bg-white border-b border-gray-200 flex justify-between items-center;
  }
  
  .modal-close {
    @apply text-gray-400 hover:text-gray-500;
  }
  
  .modal-body {
    @apply px-6 py-4 max-h-[calc(100vh-200px)] overflow-y-auto;
  }
  
  .modal-footer {
    @apply px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-end space-x-3;
  }
  
  .th-cell {
    @apply px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;
  }
  
  .td-cell {
    @apply px-4 py-3 whitespace-nowrap text-sm;
  }
  
  .cert-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800;
  }
  
  .status-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }
  
  .status-badge.active {
    @apply bg-green-100 text-green-800;
  }
  
  .status-badge.inactive {
    @apply bg-gray-100 text-gray-800;
  }
  
  .action-btn {
    @apply p-1 text-gray-500 hover:text-blue-600 focus:outline-none;
  }
  
  .hidden {
    @apply hidden;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const examModal = document.getElementById('exam-modal');
    const deleteModal = document.getElementById('delete-modal');
    
    // Modal elements
    const modalTitle = document.getElementById('modal-title');
    const examForm = document.getElementById('exam-form');
    const examId = document.getElementById('exam-id');
    const examCertification = document.getElementById('exam-certification');
    const certificationInfo = document.getElementById('certification-info');
    const certificationTime = document.getElementById('certification-time');
    const certificationQuestions = document.getElementById('certification-questions');
    const questionCountWarning = document.getElementById('question-count-warning');
    
    // Button event listeners
    document.getElementById('add-exam').addEventListener('click', openAddExamModal);
    document.getElementById('close-modal').addEventListener('click', closeExamModal);
    document.getElementById('cancel-exam').addEventListener('click', closeExamModal);
    document.getElementById('close-delete-modal').addEventListener('click', closeDeleteModal);
    document.getElementById('cancel-delete').addEventListener('click', closeDeleteModal);
    
    // Certification filter change
    document.getElementById('certification-filter').addEventListener('change', function() {
      const certId = this.value;
      if (certId) {
        window.location.href = `/admin/exams?certification=${certId}`;
      } else {
        window.location.href = '/admin/exams';
      }
    });
    
    // Add click handlers for action buttons
    document.querySelectorAll('.edit-exam').forEach(btn => {
      btn.addEventListener('click', () => editExam(btn.dataset.id));
    });
    
    document.querySelectorAll('.duplicate-exam').forEach(btn => {
      btn.addEventListener('click', () => duplicateExam(btn.dataset.id));
    });
    
    document.querySelectorAll('.toggle-status').forEach(btn => {
      btn.addEventListener('click', () => toggleExamStatus(
        btn.dataset.id, 
        btn.dataset.active === 'true'
      ));
    });
    
    document.querySelectorAll('.delete-exam').forEach(btn => {
      btn.addEventListener('click', () => confirmDeleteExam(btn.dataset.id));
    });
    
    // Form submission handlers
    examForm.addEventListener('submit', handleExamFormSubmit);
    document.getElementById('save-exam').addEventListener('click', () => examForm.requestSubmit());
    document.getElementById('confirm-delete').addEventListener('click', handleDeleteExam);
    
    // Certification change handler - load info and validate question count
    examCertification.addEventListener('change', loadCertificationInfo);
    document.getElementById('exam-question-count').addEventListener('input', validateQuestionCount);
    
    // Open add exam modal
    function openAddExamModal() {
      modalTitle.textContent = 'Create New Exam';
      examId.value = '';
      examForm.reset();
      
      // Initialize with certification if filter is active
      const certFilterValue = document.getElementById('certification-filter').value;
      if (certFilterValue) {
        examCertification.value = certFilterValue;
        loadCertificationInfo();
      }
      
      certificationInfo.classList.add('hidden');
      questionCountWarning.classList.add('hidden');
      
      examModal.classList.remove('hidden');
    }
    
    // Load certification info when selected
    function loadCertificationInfo() {
      const certId = examCertification.value;
      if (!certId) {
        certificationInfo.classList.add('hidden');
        return;
      }
      
      fetch(`/admin/certifications/${certId}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const cert = data.certification;
            
            // Update info display
            certificationTime.textContent = `Time Limit: ${cert.timeLimit} minutes`;
            
            // Check available questions
            fetch(`/admin/questions/count?certification=${certId}`)
              .then(response => response.json())
              .then(countData => {
                if (countData.success) {
                  certificationQuestions.textContent = ` | Available Questions: ${countData.count}`;
                  
                  // Update default question count based on what's available
                  const questionCount = document.getElementById('exam-question-count');
                  const defaultCount = Math.min(65, countData.count);
                  questionCount.value = defaultCount > 0 ? defaultCount : 1;
                  
                  validateQuestionCount();
                }
                
                certificationInfo.classList.remove('hidden');
              });
          }
        })
        .catch(error => {
          console.error('Error loading certification info:', error);
        });
    }
    
    // Validate question count against available questions
    function validateQuestionCount() {
      const certId = examCertification.value;
      const requestedCount = parseInt(document.getElementById('exam-question-count').value);
      
      if (!certId || isNaN(requestedCount)) {
        questionCountWarning.classList.add('hidden');
        return;
      }
      
      fetch(`/admin/questions/count?certification=${certId}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const availableCount = data.count;
            
            if (requestedCount > availableCount) {
              questionCountWarning.textContent = 
                `Warning: Only ${availableCount} questions available for this certification.`;
              questionCountWarning.classList.remove('hidden');
            } else {
              questionCountWarning.classList.add('hidden');
            }
          }
        })
        .catch(error => {
          console.error('Error checking question count:', error);
        });
    }
    
    // Open edit exam modal
    function editExam(id) {
      modalTitle.textContent = 'Edit Exam';
      
      // Fetch exam data
      fetch(`/admin/exams/${id}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const exam = data.exam;
            
            // Set form values
            examId.value = exam._id;
            document.getElementById('exam-name').value = exam.name;
            document.getElementById('exam-description').value = exam.description || '';
            examCertification.value = exam.certificationId;
            document.getElementById('exam-question-count').value = exam.questionCount;
            document.getElementById('exam-time-limit').value = exam.timeLimit || '';
            document.getElementById('exam-randomize').checked = exam.randomize;
            document.getElementById('exam-show-results').checked = exam.showResults;
            
            // Load certification info
            loadCertificationInfo();
            
            examModal.classList.remove('hidden');
          } else {
            showAlert('Error loading exam', 'error');
          }
        })
        .catch(error => {
          console.error('Error fetching exam:', error);
          showAlert('Error loading exam', 'error');
        });
    }
    
    // Duplicate exam
    function duplicateExam(id) {
      // Fetch exam data
      fetch(`/admin/exams/${id}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const exam = data.exam;
            
            // Set form values for a new exam based on existing one
            modalTitle.textContent = 'Create New Exam';
            examId.value = ''; // Clear ID for new exam
            document.getElementById('exam-name').value = `${exam.name} (Copy)`;
            document.getElementById('exam-description').value = exam.description || '';
            examCertification.value = exam.certificationId;
            document.getElementById('exam-question-count').value = exam.questionCount;
            document.getElementById('exam-time-limit').value = exam.timeLimit || '';
            document.getElementById('exam-randomize').checked = exam.randomize;
            document.getElementById('exam-show-results').checked = exam.showResults;
            
            // Load certification info
            loadCertificationInfo();
            
            examModal.classList.remove('hidden');
          } else {
            showAlert('Error duplicating exam', 'error');
          }
        })
        .catch(error => {
          console.error('Error fetching exam for duplication:', error);
          showAlert('Error duplicating exam', 'error');
        });
    }
    
    // Handle exam form submission
    function handleExamFormSubmit(e) {
      e.preventDefault();
      
      // Validate form
      if (!validateExamForm()) {
        return;
      }
      
      // Collect form data
      const formData = new FormData(examForm);
      
      // Build request data
      const requestData = {
        id: formData.get('id') || undefined,
        name: formData.get('name'),
        certificationId: formData.get('certificationId'),
        description: formData.get('description'),
        questionCount: parseInt(formData.get('questionCount')),
        timeLimit: formData.get('timeLimit') ? parseInt(formData.get('timeLimit')) : null,
        randomize: formData.get('randomize') === 'on',
        showResults: formData.get('showResults') === 'on'
      };
      
      // Determine if creating or updating
      const isUpdate = !!requestData.id;
      const url = isUpdate ? `/admin/exams/${requestData.id}` : '/admin/exams';
      const method = isUpdate ? 'PUT' : 'POST';
      
      // Send request
      fetch(url, {
        method: method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          closeExamModal();
          showAlert(
            `Exam ${isUpdate ? 'updated' : 'created'} successfully`, 
            'success'
          );
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showAlert(data.message || `Error ${isUpdate ? 'updating' : 'creating'} exam`, 'error');
        }
      })
      .catch(error => {
        console.error(`Error ${isUpdate ? 'updating' : 'creating'} exam:`, error);
        showAlert(`Error ${isUpdate ? 'updating' : 'creating'} exam`, 'error');
      });
    }
    
    // Validate exam form
    function validateExamForm() {
      // Check required fields
      const certificationId = examCertification.value;
      const name = document.getElementById('exam-name').value.trim();
      const questionCount = parseInt(document.getElementById('exam-question-count').value);
      
      if (!certificationId) {
        showAlert('Please select a certification', 'error');
        examCertification.focus();
        return false;
      }
      
      if (!name) {
        showAlert('Exam name is required', 'error');
        document.getElementById('exam-name').focus();
        return false;
      }
      
      if (isNaN(questionCount) || questionCount < 1) {
        showAlert('Question count must be at least 1', 'error');
        document.getElementById('exam-question-count').focus();
        return false;
      }
      
      // Check time limit if provided
      const timeLimit = document.getElementById('exam-time-limit').value;
      if (timeLimit && (isNaN(parseInt(timeLimit)) || parseInt(timeLimit) < 1)) {
        showAlert('Time limit must be a positive number', 'error');
        document.getElementById('exam-time-limit').focus();
        return false;
      }
      
      return true;
    }
    
    // Confirm exam deletion
    function confirmDeleteExam(id) {
      // Reset modal
      deleteModal.classList.remove('hidden');
      document.getElementById('delete-warning').classList.add('hidden');
      
      // Set delete button action
      document.getElementById('confirm-delete').dataset.id = id;
      
      // Check if exam has been used
      fetch(`/admin/exams/${id}/attempts/count`)
        .then(response => response.json())
        .then(data => {
          if (data.success && data.count > 0) {
            document.getElementById('delete-warning').classList.remove('hidden');
          }
        })
        .catch(error => {
          console.error('Error checking exam usage:', error);
        });
    }
    
    // Handle exam deletion
    function handleDeleteExam() {
      const id = document.getElementById('confirm-delete').dataset.id;
      
      fetch(`/admin/exams/${id}`, {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        closeDeleteModal();
        
        if (data.success) {
          showAlert(data.message || 'Exam deleted successfully', 'success');
          
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showAlert(data.message || 'Error deleting exam', 'error');
        }
      })
      .catch(error => {
        console.error('Error deleting exam:', error);
        showAlert('Error deleting exam', 'error');
        closeDeleteModal();
      });
    }
    
    // Toggle exam status
    function toggleExamStatus(id, isCurrentlyActive) {
      const newStatus = !isCurrentlyActive;
      const action = newStatus ? 'activate' : 'deactivate';
      
      if (!confirm(`Are you sure you want to ${action} this exam?`)) {
        return;
      }
      
      fetch(`/admin/exams/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          active: newStatus
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showAlert(`Exam ${action}d successfully`, 'success');
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } else {
          showAlert(data.message || `Failed to ${action} exam`, 'error');
        }
      })
      .catch(error => {
        console.error(`Error ${action}ing exam:`, error);
        showAlert(`Failed to ${action} exam`, 'error');
      });
    }
    
    // Modal control functions
    function closeExamModal() {
      examModal.classList.add('hidden');
    }
    
    function closeDeleteModal() {
      deleteModal.classList.add('hidden');
    }
    
    // Show alert notification
    function showAlert(message, type = 'info') {
      // Create alert element if it doesn't exist
      let alertContainer = document.getElementById('alert-container');
      if (!alertContainer) {
        alertContainer = document.createElement('div');
        alertContainer.id = 'alert-container';
        alertContainer.className = 'fixed top-4 right-4 z-50 flex flex-col space-y-2';
        document.body.appendChild(alertContainer);
      }
      
      // Create alert
      const alert = document.createElement('div');
      alert.className = `alert alert-${type} transform transition-all duration-300 translate-x-full`;
      alert.innerHTML = `
        <div class="flex items-center">
          <div class="flex-shrink-0">
            ${type === 'success' ? 
              '<i class="fas fa-check-circle text-green-500"></i>' : 
              type === 'error' ? 
              '<i class="fas fa-exclamation-circle text-red-500"></i>' :
              '<i class="fas fa-info-circle text-blue-500"></i>'
            }
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium">${message}</p>
          </div>
          <div class="ml-auto pl-3">
            <button class="alert-close">
              <i class="fas fa-times text-gray-400 hover:text-gray-500"></i>
            </button>
          </div>
        </div>
      `;
      
      // Add alert styles based on type
      if (type === 'success') {
        alert.classList.add('bg-green-50', 'border-green-100', 'text-green-800');
      } else if (type === 'error') {
        alert.classList.add('bg-red-50', 'border-red-100', 'text-red-800');
      } else if (type === 'warning') {
        alert.classList.add('bg-yellow-50', 'border-yellow-100', 'text-yellow-800');
      } else {
        alert.classList.add('bg-blue-50', 'border-blue-100', 'text-blue-800');
      }
      
      // Add base alert styles
      alert.classList.add('rounded-md', 'p-4', 'border', 'shadow-md', 'w-80');
      
      // Add to container
      alertContainer.appendChild(alert);
      
      // Animate in
      setTimeout(() => {
        alert.classList.remove('translate-x-full');
      }, 10);
      
      // Add close handler
      alert.querySelector('.alert-close').addEventListener('click', () => {
        alert.classList.add('translate-x-full');
        setTimeout(() => {
          alert.remove();
        }, 300);
      });
      
      // Auto dismiss after 5 seconds
      setTimeout(() => {
        if (alert.parentNode) {
          alert.classList.add('translate-x-full');
          setTimeout(() => {
            alert.remove();
          }, 300);
        }
      }, 5000);
    }
  });
</script>

<%- include('../layouts/footer') %>