<div class="flex items-center">
    <i class="fas <%= attempt.terminatedBy ? 'fa-exclamation-triangle text-red-400' : 'fa-check-shield text-green-400' %> mr-2"></i>
    <span><%= attempt.terminatedBy ? 'Exam Terminated' : 'Exam Completed Normally' %></span>
  </div>
</div>
</div>
</div>
</div>
</div>

<!-- Domain Breakdown -->
<div class="bg-white rounded-lg shadow-md overflow-hidden mb-8">
<div class="px-6 py-4 border-b border-gray-200">
<h2 class="text-xl font-semibold text-gray-800">Domain Breakdown</h2>
</div>
<div class="p-6">
<div class="grid grid-cols-1 gap-4">
<% attempt.score.byDomain.forEach(domainScore => { %>
<div class="domain-score-item">
  <div class="domain-score-header">
    <h3 class="domain-name"><%= domainScore.domain %></h3>
    <div class="domain-score <%= getScoreColorClass(domainScore.score) %>">
      <%= domainScore.score.toFixed(1) %>%
    </div>
  </div>
  <div class="domain-score-bar-container">
    <div class="domain-score-bar" style="width: <%= domainScore.score %>%"></div>
  </div>
  <div class="domain-score-details">
    <div class="domain-score-detail">
      <span class="detail-label">Questions:</span>
      <span class="detail-value"><%= domainScore.questionsCount %></span>
    </div>
    <div class="domain-score-detail">
      <span class="detail-label">Correct:</span>
      <span class="detail-value"><%= Math.round(domainScore.questionsCount * domainScore.score / 100) %></span>
    </div>
    <div class="domain-score-detail">
      <span class="detail-label">Performance:</span>
      <span class="detail-value <%= getPerformanceClass(domainScore.score) %>">
        <%= getPerformanceLabel(domainScore.score) %>
      </span>
    </div>
  </div>
</div>
<% }); %>
</div>
</div>
</div>

<!-- Improvement Recommendations -->
<div class="bg-white rounded-lg shadow-md overflow-hidden mb-8">
<div class="px-6 py-4 border-b border-gray-200">
<h2 class="text-xl font-semibold text-gray-800">Improvement Recommendations</h2>
</div>
<div class="p-6">
<% if (recommendations && recommendations.weakDomains && recommendations.weakDomains.length > 0) { %>
<div class="mb-6">
<h3 class="text-lg font-medium text-gray-800 mb-2">Focus Areas</h3>
<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
  <% recommendations.weakDomains.forEach(domain => { %>
    <div class="focus-area-card">
      <div class="focus-area-header">
        <div class="focus-icon">
          <i class="fas fa-bullseye"></i>
        </div>
        <div class="focus-title"><%= domain %></div>
      </div>
      <div class="focus-score">
        <% 
          const domainScore = attempt.score.byDomain.find(d => d.domain === domain);
          if (domainScore) {
        %>
          <span class="<%= getScoreColorClass(domainScore.score) %>">
            <%= domainScore.score.toFixed(1) %>%
          </span>
        <% } else { %>
          <span class="text-gray-500">N/A</span>
        <% } %>
      </div>
    </div>
  <% }); %>
</div>
</div>

<div class="mb-6">
<h3 class="text-lg font-medium text-gray-800 mb-2">Study Recommendations</h3>
<ul class="recommendation-list">
  <% recommendations.studyRecommendations.forEach(recommendation => { %>
    <li class="recommendation-item">
      <div class="recommendation-icon">
        <i class="fas fa-book"></i>
      </div>
      <div class="recommendation-text"><%= recommendation %></div>
    </li>
  <% }); %>
</ul>
</div>

<div>
<h3 class="text-lg font-medium text-gray-800 mb-2">Practice Strategy</h3>
<ul class="recommendation-list">
  <% recommendations.practiceStrategy.forEach(strategy => { %>
    <li class="recommendation-item">
      <div class="recommendation-icon">
        <i class="fas fa-tasks"></i>
      </div>
      <div class="recommendation-text"><%= strategy %></div>
    </li>
  <% }); %>
</ul>
</div>
<% } else { %>
<div class="text-center py-8">
<div class="text-gray-400 mb-4">
  <i class="fas fa-thumbs-up text-5xl"></i>
</div>
<h3 class="text-xl font-medium text-gray-700 mb-2">Great Job!</h3>
<p class="text-gray-500 mb-4">
  You've performed well across all domains. Keep up the good work!
</p>
<div class="mt-6">
  <a href="/exams/<%= certification._id %>/select" class="btn btn-primary">
    Practice More Exams
  </a>
</div>
</div>
<% } %>
</div>
</div>

<!-- Question Review -->
<div class="bg-white rounded-lg shadow-md overflow-hidden">
<div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
<h2 class="text-xl font-semibold text-gray-800">Question Review</h2>
<div class="flex space-x-4">
<div class="filter-pill">
<select id="question-filter" class="filter-select">
  <option value="all">All Questions</option>
  <option value="correct">Correct Only</option>
  <option value="incorrect">Incorrect Only</option>
  <option value="flagged">Flagged Only</option>
</select>
</div>
<button id="collapse-all" class="text-sm text-blue-600 hover:text-blue-800">
Collapse All
</button>
<button id="expand-all" class="text-sm text-blue-600 hover:text-blue-800">
Expand All
</button>
</div>
</div>

<div id="question-review-container" class="divide-y divide-gray-200">
<% questions.forEach((question, index) => { %>
<div class="question-review-item" 
   data-correct="<%= question.correct ? 'true' : 'false' %>"
   data-flagged="<%= question.flagged ? 'true' : 'false' %>">
<div class="question-review-header">
  <div class="question-number">Question <%= index + 1 %></div>
  <div class="question-status">
    <% if (question.correct) { %>
      <span class="status-badge correct">
        <i class="fas fa-check mr-1"></i> Correct
      </span>
    <% } else { %>
      <span class="status-badge incorrect">
        <i class="fas fa-times mr-1"></i> Incorrect
      </span>
    <% } %>
    
    <% if (question.flagged) { %>
      <span class="status-badge flagged">
        <i class="fas fa-flag mr-1"></i> Flagged
      </span>
    <% } %>
    
    <span class="status-badge time">
      <i class="fas fa-clock mr-1"></i> <%= formatSeconds(question.timeSpent) %>
    </span>
  </div>
  <button class="toggle-question-details">
    <i class="fas fa-chevron-down"></i>
  </button>
</div>

<div class="question-review-details hidden">
  <div class="question-text">
    <%= question.text %>
  </div>
  
  <div class="options-list mt-4">
    <% question.options.forEach(option => { 
      const isSelected = question.userAnswers.includes(option.id);
      const isCorrect = question.correctAnswers.includes(option.id);
      
      let optionClass = '';
      if (isSelected && isCorrect) {
        optionClass = 'correct-selected';
      } else if (isSelected && !isCorrect) {
        optionClass = 'incorrect-selected';
      } else if (!isSelected && isCorrect) {
        optionClass = 'correct-not-selected';
      }
    %>
      <div class="option-item <%= optionClass %>">
        <div class="option-marker">
          <%= option.id %>
          <% if (isSelected) { %>
            <i class="fas fa-check option-check <%= isCorrect ? 'text-green-500' : 'text-red-500' %>"></i>
          <% } else if (isCorrect) { %>
            <i class="fas fa-check option-check text-green-500"></i>
          <% } %>
        </div>
        <div class="option-text"><%= option.text %></div>
      </div>
    <% }); %>
  </div>
  
  <% if (question.explanation) { %>
    <div class="explanation-container">
      <div class="explanation-header">
        <i class="fas fa-info-circle mr-2"></i> Explanation
      </div>
      <div class="explanation-content">
        <%= question.explanation %>
      </div>
    </div>
  <% } %>
  
  <div class="question-meta">
    <div class="meta-item">
      <span class="meta-label">Domain:</span>
      <span class="meta-value"><%= question.domain %></span>
    </div>
    <div class="meta-item">
      <span class="meta-label">Difficulty:</span>
      <span class="meta-value">
        <% for(let i = 1; i <= 5; i++) { %>
          <i class="fas fa-circle <%= i <= question.difficulty ? 'text-blue-500' : 'text-gray-300' %>"></i>
        <% } %>
      </span>
    </div>
    <% if (question.tags && question.tags.length > 0) { %>
      <div class="meta-item">
        <span class="meta-label">Tags:</span>
        <span class="meta-value tags">
          <% question.tags.forEach(tag => { %>
            <span class="tag"><%= tag %></span>
          <% }); %>
        </span>
      </div>
    <% } %>
  </div>
</div>
</div>
<% }); %>
</div>
</div>
</div>
</div>

<!-- Helper Functions -->
<%
function getScoreColorClass(score) {
if (score >= 90) return 'text-green-600';
if (score >= 80) return 'text-green-500';
if (score >= 70) return 'text-blue-500';
if (score >= 60) return 'text-yellow-500';
return 'text-red-500';
}

function getPerformanceLabel(score) {
if (score >= 90) return 'Excellent';
if (score >= 80) return 'Good';
if (score >= 70) return 'Satisfactory';
if (score >= 60) return 'Needs Improvement';
return 'Requires Focus';
}

function getPerformanceClass(score) {
if (score >= 90) return 'text-green-600';
if (score >= 80) return 'text-green-500';
if (score >= 70) return 'text-blue-500';
if (score >= 60) return 'text-yellow-500';
return 'text-red-500';
}

function formatTime(seconds) {
const hours = Math.floor(seconds / 3600);
const minutes = Math.floor((seconds % 3600) / 60);
const secs = seconds % 60;

let result = '';
if (hours > 0) result += `${hours}h `;
if (minutes > 0 || hours > 0) result += `${minutes}m `;
result += `${secs}s`;

return result;
}

function formatSeconds(seconds) {
const minutes = Math.floor(seconds / 60);
const secs = seconds % 60;

if (minutes > 0) {
return `${minutes}m ${secs}s`;
} else {
return `${secs}s`;
}
}
%>

<!-- Results Styling -->
<style>
.results-container {
@apply bg-gray-50 min-h-screen pb-8;
}

.result-badge {
@apply inline-flex items-center px-4 py-2 rounded-full text-white text-lg font-semibold;
}

.result-badge.passed {
@apply bg-green-500;
}

.result-badge.failed {
@apply bg-red-500;
}

.result-stat-card {
@apply bg-gray-50 rounded-lg p-4 border border-gray-200;
}

.stat-icon {
@apply w-12 h-12 rounded-full flex items-center justify-center text-lg;
}

.score-bar-container {
@apply relative h-2 w-full rounded-full overflow-hidden;
}

.score-bar-background {
@apply absolute inset-0 bg-gray-200;
}

.score-bar-passing {
@apply absolute top-0 bottom-0 w-0.5 bg-black z-10;
}

.score-bar-fill {
@apply absolute top-0 left-0 bottom-0 rounded-full z-0;
}

.score-bar-fill.text-green-600, .score-bar-fill.text-green-500 {
@apply bg-green-500;
}

.score-bar-fill.text-blue-500 {
@apply bg-blue-500;
}

.score-bar-fill.text-yellow-500 {
@apply bg-yellow-500;
}

.score-bar-fill.text-red-500 {
@apply bg-red-500;
}

.domain-score-item {
@apply bg-gray-50 rounded-lg p-4 border border-gray-200;
}

.domain-score-header {
@apply flex justify-between items-center mb-2;
}

.domain-name {
@apply text-lg font-medium text-gray-800;
}

.domain-score {
@apply text-xl font-semibold;
}

.domain-score-bar-container {
@apply w-full h-2 bg-gray-200 rounded-full overflow-hidden mb-3;
}

.domain-score-bar {
@apply h-full rounded-full transition-all duration-500 ease-out;
}

.text-green-600 + .domain-score-bar-container .domain-score-bar,
.text-green-500 + .domain-score-bar-container .domain-score-bar {
@apply bg-green-500;
}

.text-blue-500 + .domain-score-bar-container .domain-score-bar {
@apply bg-blue-500;
}

.text-yellow-500 + .domain-score-bar-container .domain-score-bar {
@apply bg-yellow-500;
}

.text-red-500 + .domain-score-bar-container .domain-score-bar {
@apply bg-red-500;
}

.domain-score-details {
@apply flex flex-wrap justify-between text-sm;
}

.domain-score-detail {
@apply flex-grow-0 flex-shrink-0 flex flex-col sm:flex-row sm:items-center mb-2 sm:mb-0;
}

.detail-label {
@apply text-gray-500 mr-1;
}

.detail-value {
@apply font-medium text-gray-800;
}

.focus-area-card {
@apply flex justify-between items-center p-3 bg-white rounded-md border border-gray-200 shadow-sm;
}

.focus-area-header {
@apply flex items-center;
}

.focus-icon {
@apply w-8 h-8 rounded-full bg-red-100 text-red-600 flex items-center justify-center mr-3;
}

.focus-title {
@apply font-medium text-gray-800;
}

.focus-score {
@apply text-lg font-semibold;
}

.recommendation-list {
@apply space-y-3;
}

.recommendation-item {
@apply flex p-3 bg-white rounded-md border border-gray-200 shadow-sm;
}

.recommendation-icon {
@apply w-8 h-8 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center mr-3 flex-shrink-0;
}

.recommendation-text {
@apply text-gray-700;
}

.filter-pill {
@apply relative;
}

.filter-select {
@apply appearance-none bg-white border border-gray-300 rounded-full px-4 py-1 pr-8 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500;
}

.filter-pill::after {
content: "";
@apply absolute right-3 top-1/2 transform -translate-y-1/2 border-l-4 border-r-4 border-t-4 border-l-transparent border-r-transparent border-t-gray-500 pointer-events-none;
}

.question-review-item {
@apply bg-white;
}

.question-review-header {
@apply flex items-center justify-between p-4 cursor-pointer hover:bg-gray-50;
}

.question-number {
@apply font-medium text-gray-700;
}

.question-status {
@apply flex space-x-2;
}

.status-badge {
@apply inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium;
}

.status-badge.correct {
@apply bg-green-100 text-green-800;
}

.status-badge.incorrect {
@apply bg-red-100 text-red-800;
}

.status-badge.flagged {
@apply bg-yellow-100 text-yellow-800;
}

.status-badge.time {
@apply bg-gray-100 text-gray-800;
}

.toggle-question-details {
@apply text-gray-400 hover:text-gray-600 focus:outline-none transition-transform duration-200;
}

.question-review-details {
@apply p-4 bg-gray-50 border-t border-gray-200;
}

.question-text {
@apply text-gray-800 mb-4;
}

.options-list {
@apply space-y-3;
}

.option-item {
@apply flex items-start p-3 border border-gray-300 rounded-md bg-white;
}

.option-item.correct-selected {
@apply bg-green-50 border-green-300;
}

.option-item.incorrect-selected {
@apply bg-red-50 border-red-300;
}

.option-item.correct-not-selected {
@apply bg-blue-50 border-blue-300;
}

.option-marker {
@apply relative flex-shrink-0 w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center font-medium text-gray-700 mr-3;
}

.option-check {
@apply absolute -top-1 -right-1 bg-white rounded-full text-xs h-4 w-4 flex items-center justify-center;
}

.option-text {
@apply text-gray-700 pt-1;
}

.option-item.correct-selected .option-marker {
@apply bg-green-100 text-green-700;
}

.option-item.incorrect-selected .option-marker {
@apply bg-red-100 text-red-700;
}

.option-item.correct-not-selected .option-marker {
@apply bg-blue-100 text-blue-700;
}

.explanation-container {
@apply mt-4 bg-blue-50 rounded-md overflow-hidden;
}

.explanation-header {
@apply bg-blue-100 text-blue-700 px-4 py-2 font-medium;
}

.explanation-content {
@apply p-4 text-gray-700;
}

.question-meta {
@apply mt-4 pt-3 border-t border-gray-200 flex flex-wrap;
}

.meta-item {
@apply mr-6 mb-2;
}

.meta-label {
@apply text-gray-500 text-sm;
}

.meta-value {
@apply ml-1 text-sm font-medium text-gray-800;
}

.meta-value.tags {
@apply flex flex-wrap mt-1;
}

.tag {
@apply inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gray-100 text-gray-800 mr-1 mt-1;
}

.btn {
@apply inline-flex items-center px-4 py-2 border text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
}

.btn-primary {
@apply border-transparent text-white bg-blue-600 hover:bg-blue-700;
}

.btn-outline {
@apply border-gray-300 text-gray-700 bg-white hover:bg-gray-50;
}

.hidden {
@apply hidden;
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
// Question filtering
const questionFilter = document.getElementById('question-filter');
const questions = document.querySelectorAll('.question-review-item');

questionFilter.addEventListener('change', filterQuestions);

function filterQuestions() {
const filter = questionFilter.value;

questions.forEach(question => {
const isCorrect = question.dataset.correct === 'true';
const isFlagged = question.dataset.flagged === 'true';

if (filter === 'all') {
question.classList.remove('hidden');
} else if (filter === 'correct' && isCorrect) {
question.classList.remove('hidden');
} else if (filter === 'incorrect' && !isCorrect) {
question.classList.remove('hidden');
} else if (filter === 'flagged' && isFlagged) {
question.classList.remove('hidden');
} else {
question.classList.add('hidden');
}
});
}

// Question expansion toggle
const toggleButtons = document.querySelectorAll('.toggle-question-details');
const questionHeaders = document.querySelectorAll('.question-review-header');
const questionDetails = document.querySelectorAll('.question-review-details');

toggleButtons.forEach((button, index) => {
button.addEventListener('click', () => toggleQuestion(index));
});

questionHeaders.forEach((header, index) => {
header.addEventListener('click', (e) => {
// Don't toggle if clicking on status badges
if (!e.target.closest('.question-status')) {
toggleQuestion(index);
}
});
});

function toggleQuestion(index) {
const details = questionDetails[index];
const button = toggleButtons[index];

if (details.classList.contains('hidden')) {
details.classList.remove('hidden');
button.querySelector('i').classList.remove('fa-chevron-down');
button.querySelector('i').classList.add('fa-chevron-up');
} else {
details.classList.add('hidden');
button.querySelector('i').classList.remove('fa-chevron-up');
button.querySelector('i').classList.add('fa-chevron-down');
}
}

// Expand/Collapse All
const expandAllButton = document.getElementById('expand-all');
const collapseAllButton = document.getElementById('collapse-all');

expandAllButton.addEventListener('click', expandAll);
collapseAllButton.addEventListener('click', collapseAll);

function expandAll() {
questionDetails.forEach((details, index) => {
details.classList.remove('hidden');
toggleButtons[index].querySelector('i').classList.remove('fa-chevron-down');
toggleButtons[index].querySelector('i').classList.add('fa-chevron-up');
});
}

function collapseAll() {
questionDetails.forEach((details, index) => {
details.classList.add('hidden');
toggleButtons[index].querySelector('i').classList.remove('fa-chevron-up');
toggleButtons[index].querySelector('i').classList.add('fa-chevron-down');
});
}

// Initialize with first question expanded
if (questionDetails.length > 0) {
questionDetails[0].classList.remove('hidden');
toggleButtons[0].querySelector('i').classList.remove('fa-chevron-down');
toggleButtons[0].querySelector('i').classList.add('fa-chevron-up');
}
});
</script>

<%- include('../layouts/footer') %><!-- views/exams/results.ejs -->
<%- include('../layouts/main', { title: title }) %>

<div class="results-container">
<div class="container mx-auto px-4 py-8">
<!-- Results Header -->
<div class="results-header mb-8">
<div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
<div>
<h1 class="text-3xl font-bold text-gray-800 mb-2">Exam Results</h1>
<div class="text-gray-600"><%= exam.name %> | <%= certification.name %></div>
</div>
<div class="flex mt-4 md:mt-0 space-x-4">
<a href="/exams/<%= certification._id %>/select" class="btn btn-outline">
<i class="fas fa-chevron-left mr-2"></i> Back to Exams
</a>
<a href="/analytics/attempt/<%= attempt._id %>" class="btn btn-outline">
<i class="fas fa-chart-bar mr-2"></i> Detailed Analysis
</a>
</div>
</div>
</div>

<!-- Results Summary Card -->
<div class="bg-white rounded-lg shadow-md overflow-hidden mb-8">
<div class="p-6 pb-0">
<div class="flex flex-col md:flex-row items-start md:items-center justify-between">
<div class="mb-4 md:mb-0">
<h2 class="text-xl font-semibold text-gray-800 mb-1">Overall Result</h2>
<div class="text-sm text-gray-500">
  Completed on <%= new Date(attempt.endTime).toLocaleDateString() %> 
  at <%= new Date(attempt.endTime).toLocaleTimeString() %>
</div>
</div>
<div class="result-badge <%= attempt.passed ? 'passed' : 'failed' %>">
<%= attempt.passed ? 'PASS' : 'FAIL' %>
</div>
</div>
</div>

<div class="px-6 py-4">
<div class="grid grid-cols-1 md:grid-cols-4 gap-6">
<div class="result-stat-card">
<div class="flex items-center">
  <div class="stat-icon bg-blue-100 text-blue-600">
    <i class="fas fa-chart-line"></i>
  </div>
  <div class="ml-4">
    <div class="stat-value text-3xl font-bold <%= getScoreColorClass(attempt.score.overall) %>">
      <%= attempt.score.overall.toFixed(1) %>%
    </div>
    <div class="stat-label text-sm text-gray-500">Overall Score</div>
  </div>
</div>
<div class="mt-3">
  <div class="text-sm text-gray-600">Passing Score: <%= certification.passingScore %>%</div>
  <div class="score-bar-container mt-1">
    <div class="score-bar-background"></div>
    <div class="score-bar-passing" style="left: <%= certification.passingScore %>%"></div>
    <div class="score-bar-fill <%= getScoreColorClass(attempt.score.overall) %>" 
         style="width: <%= attempt.score.overall %>%"></div>
  </div>
</div>
</div>

<div class="result-stat-card">
<div class="flex items-center">
  <div class="stat-icon bg-green-100 text-green-600">
    <i class="fas fa-check-circle"></i>
  </div>
  <div class="ml-4">
    <div class="stat-value text-2xl font-semibold">
      <%= attempt.questions.filter(q => q.correct).length %> / <%= attempt.questions.length %>
    </div>
    <div class="stat-label text-sm text-gray-500">Questions Correct</div>
  </div>
</div>
<div class="mt-3 text-sm text-gray-600">
  <div class="flex items-center">
    <i class="fas fa-clock text-gray-400 mr-2"></i>
    <span>Time Spent: <%= formatTime(attempt.timeSpent) %></span>
  </div>
</div>
</div>

<div class="result-stat-card">
<div class="flex items-center">
  <div class="stat-icon bg-indigo-100 text-indigo-600">
    <i class="fas fa-heart"></i>
  </div>
  <div class="ml-4">
    <div class="stat-value text-2xl font-semibold">
      <%= Math.round(attempt.score.overall >= certification.passingScore ? 
         Math.min(100, attempt.score.overall + 5) : 
         Math.max(20, attempt.score.overall - 5)) %>%
    </div>
    <div class="stat-label text-sm text-gray-500">Estimated Readiness</div>
  </div>
</div>
<div class="mt-3 text-sm text-gray-600">
  <div class="flex items-center">
    <i class="fas fa-certificate text-gray-400 mr-2"></i>
    <span>For: <%= certification.name %></span>
  </div>
</div>
</div>

<div class="result-stat-card">
<div class="flex items-center">
  <div class="stat-icon bg-purple-100 text-purple-600">
    <i class="fas fa-flag"></i>
  </div>
  <div class="ml-4">
    <div class="stat-value text-2xl font-semibold">
      <%= proctorSummary?.violations || 0 %>
    </div>
    <div class="stat-label text-sm text-gray-500">Proctor Alerts</div>
  </div>
</div>
<div class="mt-3 text-sm text-gray-600">
  <div class="flex items-center">