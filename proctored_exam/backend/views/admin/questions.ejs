<!-- views/admin/questions.ejs -->
<%- include('../layouts/admin-layout', { title: title }) %>

<div class="admin-questions">
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold text-gray-800">Question Management</h1>
      <div class="flex space-x-4">
        <a href="#" class="btn btn-outline" id="export-questions">
          <i class="fas fa-file-export mr-2"></i> Export
        </a>
        <a href="#" class="btn btn-outline" id="import-questions">
          <i class="fas fa-file-import mr-2"></i> Import
        </a>
        <a href="#" class="btn btn-primary" id="add-question">
          <i class="fas fa-plus mr-2"></i> Add Question
        </a>
      </div>
    </div>

    <!-- Filters -->
    <div class="card mb-6">
      <div class="card-body">
        <form id="filter-form" class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div class="form-group">
            <label for="certification" class="form-label">Certification</label>
            <select id="certification" name="certification" class="form-select">
              <option value="">All Certifications</option>
              <% certifications.forEach(cert => { %>
                <option value="<%= cert._id %>" <%= filters.certification === cert._id.toString() ? 'selected' : '' %>>
                  <%= cert.name %> (<%= cert.code %>)
                </option>
              <% }); %>
            </select>
          </div>
          
          <div class="form-group">
            <label for="domain" class="form-label">Domain</label>
            <select id="domain" name="domain" class="form-select">
              <option value="">All Domains</option>
              <% domains.forEach(domain => { %>
                <option value="<%= domain %>" <%= filters.domain === domain ? 'selected' : '' %>>
                  <%= domain %>
                </option>
              <% }); %>
            </select>
          </div>
          
          <div class="form-group">
            <label for="search" class="form-label">Search</label>
            <input type="text" id="search" name="search" class="form-input" placeholder="Search text, tags..." value="<%= filters.search %>">
          </div>
          
          <div class="form-group flex items-end">
            <button type="submit" class="btn btn-secondary w-full">
              <i class="fas fa-search mr-2"></i> Filter
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Questions Table -->
    <div class="card">
      <div class="card-body p-0">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr>
                <th class="th-cell">Text</th>
                <th class="th-cell">Certification</th>
                <th class="th-cell">Domain</th>
                <th class="th-cell">Difficulty</th>
                <th class="th-cell">Analytics</th>
                <th class="th-cell">Status</th>
                <th class="th-cell">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (questions && questions.length > 0) { %>
                <% questions.forEach(question => { %>
                  <tr class="hover:bg-gray-50 border-b border-gray-200">
                    <td class="td-cell">
                      <div class="question-preview">
                        <%= question.text.length > 100 ? question.text.substring(0, 100) + '...' : question.text %>
                      </div>
                    </td>
                    <td class="td-cell">
                      <span class="cert-badge"><%= question.certificationId.code %></span>
                    </td>
                    <td class="td-cell">
                      <span class="domain-badge"><%= question.domain %></span>
                    </td>
                    <td class="td-cell">
                      <div class="difficulty-indicator">
                        <% for(let i = 1; i <= 5; i++) { %>
                          <span class="difficulty-dot <%= i <= question.difficulty ? 'active' : '' %>"></span>
                        <% } %>
                      </div>
                    </td>
                    <td class="td-cell">
                      <div class="analytics-preview">
                        <div class="flex items-center space-x-1">
                          <i class="fas fa-chart-line text-blue-500"></i>
                          <span><%= question.analytics.timesAnswered || 0 %> attempts</span>
                        </div>
                        <% if (question.analytics.timesAnswered > 0) { %>
                          <div class="text-xs text-gray-500">
                            <%= ((question.analytics.timesCorrect / question.analytics.timesAnswered) * 100).toFixed(1) %>% correct
                          </div>
                        <% } %>
                      </div>
                    </td>
                    <td class="td-cell">
                      <span class="status-badge <%= question.active ? 'active' : 'inactive' %>">
                        <%= question.active ? 'Active' : 'Inactive' %>
                      </span>
                    </td>
                    <td class="td-cell">
                      <div class="flex space-x-2">
                        <button class="action-btn edit-question" data-id="<%= question._id %>">
                          <i class="fas fa-edit"></i>
                        </button>
                        <button class="action-btn view-stats" data-id="<%= question._id %>">
                          <i class="fas fa-chart-bar"></i>
                        </button>
                        <button class="action-btn delete-question" data-id="<%= question._id %>">
                          <i class="fas fa-trash"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="7" class="py-8 text-center text-gray-500">
                    No questions found matching your criteria
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <% if (pagination.totalPages > 1) { %>
          <div class="pagination">
            <div class="pagination-info">
              Showing <%= (pagination.page - 1) * pagination.limit + 1 %> to 
              <%= Math.min(pagination.page * pagination.limit, pagination.totalQuestions) %> 
              of <%= pagination.totalQuestions %> questions
            </div>
            <div class="pagination-controls">
              <% if (pagination.page > 1) { %>
                <a href="?page=<%= pagination.page - 1 %>&limit=<%= pagination.limit %><%= filters.certification ? '&certification=' + filters.certification : '' %><%= filters.domain ? '&domain=' + filters.domain : '' %><%= filters.search ? '&search=' + filters.search : '' %>" class="pagination-btn">
                  <i class="fas fa-chevron-left"></i>
                </a>
              <% } else { %>
                <span class="pagination-btn disabled">
                  <i class="fas fa-chevron-left"></i>
                </span>
              <% } %>
              
              <% 
                let startPage = Math.max(1, pagination.page - 2);
                let endPage = Math.min(pagination.totalPages, pagination.page + 2);
                
                if (startPage > 1) { %>
                  <a href="?page=1&limit=<%= pagination.limit %><%= filters.certification ? '&certification=' + filters.certification : '' %><%= filters.domain ? '&domain=' + filters.domain : '' %><%= filters.search ? '&search=' + filters.search : '' %>" class="pagination-btn">1</a>
                  <% if (startPage > 2) { %>
                    <span class="pagination-ellipsis">...</span>
                  <% } %>
                <% } %>
                
                <% for (let i = startPage; i <= endPage; i++) { %>
                  <a href="?page=<%= i %>&limit=<%= pagination.limit %><%= filters.certification ? '&certification=' + filters.certification : '' %><%= filters.domain ? '&domain=' + filters.domain : '' %><%= filters.search ? '&search=' + filters.search : '' %>" class="pagination-btn <%= pagination.page === i ? 'active' : '' %>">
                    <%= i %>
                  </a>
                <% } %>
                
                <% if (endPage < pagination.totalPages) { %>
                  <% if (endPage < pagination.totalPages - 1) { %>
                    <span class="pagination-ellipsis">...</span>
                  <% } %>
                  <a href="?page=<%= pagination.totalPages %>&limit=<%= pagination.limit %><%= filters.certification ? '&certification=' + filters.certification : '' %><%= filters.domain ? '&domain=' + filters.domain : '' %><%= filters.search ? '&search=' + filters.search : '' %>" class="pagination-btn"><%= pagination.totalPages %></a>
                <% } %>
                
                <% if (pagination.page < pagination.totalPages) { %>
                  <a href="?page=<%= pagination.page + 1 %>&limit=<%= pagination.limit %><%= filters.certification ? '&certification=' + filters.certification : '' %><%= filters.domain ? '&domain=' + filters.domain : '' %><%= filters.search ? '&search=' + filters.search : '' %>" class="pagination-btn">
                    <i class="fas fa-chevron-right"></i>
                  </a>
                <% } else { %>
                  <span class="pagination-btn disabled">
                    <i class="fas fa-chevron-right"></i>
                  </span>
                <% } %>
            </div>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Question Editor Modal -->
<div id="question-modal" class="modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-container">
    <div class="modal-header">
      <h2 id="modal-title">Add New Question</h2>
      <button id="close-modal" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <form id="question-form">
        <input type="hidden" id="question-id" name="id">
        
        <div class="form-group">
          <label for="question-certification" class="form-label required">Certification</label>
          <select id="question-certification" name="certificationId" class="form-select" required>
            <option value="">Select Certification</option>
            <% certifications.forEach(cert => { %>
              <option value="<%= cert._id %>"><%= cert.name %> (<%= cert.code %>)</option>
            <% }); %>
          </select>
        </div>
        
        <div class="form-group">
          <label for="question-domain" class="form-label required">Domain</label>
          <select id="question-domain" name="domain" class="form-select" required>
            <option value="">Select Domain (Choose certification first)</option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="question-text" class="form-label required">Question Text</label>
          <textarea id="question-text" name="text" class="form-textarea" rows="4" required></textarea>
        </div>
        
        <div class="form-group">
          <label class="form-label required">Options</label>
          <div id="options-container" class="space-y-3">
            <!-- Options will be added dynamically -->
          </div>
          <button type="button" id="add-option" class="mt-2 text-sm text-blue-600 hover:text-blue-800">
            <i class="fas fa-plus-circle mr-1"></i> Add Option
          </button>
        </div>
        
        <div class="form-group">
          <label class="form-label required">Correct Answer(s)</label>
          <div id="correct-answers" class="flex flex-wrap gap-3">
            <!-- Correct answer checkboxes will be added dynamically -->
          </div>
        </div>
        
        <div class="form-group">
          <label for="question-explanation" class="form-label">Explanation</label>
          <textarea id="question-explanation" name="explanation" class="form-textarea" rows="3"></textarea>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div class="form-group">
            <label for="question-difficulty" class="form-label">Difficulty (1-5)</label>
            <input type="range" id="question-difficulty" name="difficulty" min="1" max="5" value="3" class="form-range">
            <div class="flex justify-between text-xs text-gray-500 mt-1">
              <span>Easy</span>
              <span>Medium</span>
              <span>Hard</span>
            </div>
          </div>
          
          <div class="form-group">
            <label for="question-tags" class="form-label">Tags (comma separated)</label>
            <input type="text" id="question-tags" name="tags" class="form-input" placeholder="e.g. ec2, networking, security">
          </div>
        </div>
      </form>
    </div>
    <div class="modal-footer">
      <button id="save-question" class="btn btn-primary">Save Question</button>
      <button id="cancel-question" class="btn btn-outline">Cancel</button>
    </div>
  </div>
</div>

<!-- Import Modal -->
<div id="import-modal" class="modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-container">
    <div class="modal-header">
      <h2>Import Questions</h2>
      <button id="close-import-modal" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <form id="import-form" enctype="multipart/form-data">
        <div class="form-group">
          <label for="import-certification" class="form-label required">Certification</label>
          <select id="import-certification" name="certificationId" class="form-select" required>
            <option value="">Select Certification</option>
            <% certifications.forEach(cert => { %>
              <option value="<%= cert._id %>"><%= cert.name %> (<%= cert.code %>)</option>
            <% }); %>
          </select>
        </div>
        
        <div class="form-group">
          <label for="import-file" class="form-label required">CSV File</label>
          <div class="file-input-container">
            <input type="file" id="import-file" name="file" class="hidden" accept=".csv">
            <div class="file-input-ui">
              <div class="file-drop-area">
                <i class="fas fa-file-csv text-3xl text-gray-400 mb-2"></i>
                <span id="file-name">Drag & drop or click to select CSV file</span>
              </div>
              <button type="button" id="browse-file" class="btn btn-outline btn-sm mt-2">Browse Files</button>
            </div>
          </div>
        </div>
        
        <div class="import-instructions mt-6">
          <h3 class="text-sm font-semibold text-gray-700 mb-2">CSV Format Instructions</h3>
          <p class="text-xs text-gray-600 mb-2">Your CSV file should have the following columns:</p>
          <div class="bg-gray-50 p-3 rounded-md">
            <code class="text-xs">domain,text,options,correctAnswers,explanation,difficulty,tags</code>
          </div>
          <ul class="text-xs text-gray-600 mt-2 space-y-1 list-disc list-inside">
            <li><strong>domain</strong>: Must match a domain in the selected certification</li>
            <li><strong>options</strong>: JSON array of {id, text} objects: <code>[{"id":"A","text":"Option 1"},...]</code></li>
            <li><strong>correctAnswers</strong>: JSON array of correct option IDs: <code>["A","C"]</code></li>
            <li><strong>tags</strong> (optional): JSON array of strings: <code>["ec2","security"]</code></li>
          </ul>
          <div class="mt-3">
            <a href="/admin/questions/template" class="text-blue-600 hover:text-blue-800 text-sm">
              <i class="fas fa-download mr-1"></i> Download Template
            </a>
          </div>
        </div>
      </form>
    </div>
    <div class="modal-footer">
      <button id="start-import" class="btn btn-primary">Import Questions</button>
      <button id="cancel-import" class="btn btn-outline">Cancel</button>
    </div>
  </div>
</div>

<!-- Question Stats Modal -->
<div id="stats-modal" class="modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-container">
    <div class="modal-header">
      <h2>Question Analytics</h2>
      <button id="close-stats-modal" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <div id="stats-loading" class="text-center py-8">
        <div class="spinner"></div>
        <p class="mt-2 text-gray-600">Loading analytics...</p>
      </div>
      
      <div id="stats-content" class="hidden">
        <div class="question-preview-box mb-4">
          <div id="stats-question-text" class="font-medium text-gray-800"></div>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h3 class="text-sm font-semibold text-gray-700 mb-3">Performance Summary</h3>
            <div class="stats-card">
              <div class="stats-grid">
                <div class="stat-item">
                  <div class="stat-label">Total Attempts</div>
                  <div id="stats-attempts" class="stat-value">0</div>
                </div>
                <div class="stat-item">
                  <div class="stat-label">Correct Percentage</div>
                  <div id="stats-correct-pct" class="stat-value">0%</div>
                </div>
                <div class="stat-item">
                  <div class="stat-label">Avg. Time Spent</div>
                  <div id="stats-avg-time" class="stat-value">0s</div>
                </div>
                <div class="stat-item">
                  <div class="stat-label">Difficulty Rating</div>
                  <div id="stats-difficulty" class="stat-value difficulty-display">
                    <span class="difficulty-dot"></span>
                    <span class="difficulty-dot"></span>
                    <span class="difficulty-dot"></span>
                    <span class="difficulty-dot"></span>
                    <span class="difficulty-dot"></span>
                  </div>
                </div>
              </div>
            </div>
            
            <h3 class="text-sm font-semibold text-gray-700 mt-4 mb-3">Time Distribution</h3>
            <div id="time-distribution-chart" class="h-40"></div>
          </div>
          
          <div>
            <h3 class="text-sm font-semibold text-gray-700 mb-3">Answer Distribution</h3>
            <div id="options-stats-container" class="space-y-3">
              <!-- Option stats will be added dynamically -->
            </div>
          </div>
        </div>
      </div>
      
      <div id="stats-empty" class="hidden text-center py-8">
        <div class="text-gray-400 mb-4">
          <i class="fas fa-chart-bar text-5xl"></i>
        </div>
        <h3 class="text-lg font-medium text-gray-700 mb-2">No Analytics Available</h3>
        <p class="text-gray-500">This question hasn't been used in any exams yet.</p>
      </div>
    </div>
    <div class="modal-footer">
      <button id="close-stats" class="btn btn-outline">Close</button>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="delete-modal" class="modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-container max-w-md">
    <div class="modal-header">
      <h2>Confirm Deletion</h2>
      <button id="close-delete-modal" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <p class="text-gray-700">Are you sure you want to delete this question? This action cannot be undone.</p>
      <div id="delete-warning" class="mt-4 hidden">
        <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <i class="fas fa-exclamation-triangle text-yellow-400"></i>
            </div>
            <div class="ml-3">
              <p class="text-sm text-yellow-700">
                This question has been used in exams. It will be deactivated instead of permanently deleted.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <button id="confirm-delete" class="btn btn-danger">Delete Question</button>
      <button id="cancel-delete" class="btn btn-outline">Cancel</button>
    </div>
  </div>
</div>

<!-- Export Modal -->
<div id="export-modal" class="modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-container">
    <div class="modal-header">
      <h2>Export Questions</h2>
      <button id="close-export-modal" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <form id="export-form">
        <div class="form-group">
          <label for="export-certification" class="form-label">Certification (Optional)</label>
          <select id="export-certification" name="certificationId" class="form-select">
            <option value="">All Certifications</option>
            <% certifications.forEach(cert => { %>
              <option value="<%= cert._id %>"><%= cert.name %> (<%= cert.code %>)</option>
            <% }); %>
          </select>
        </div>
        
        <div class="form-group">
          <label for="export-domain" class="form-label">Domain (Optional)</label>
          <select id="export-domain" name="domain" class="form-select">
            <option value="">All Domains</option>
            <!-- Domains will be loaded based on certification selection -->
          </select>
        </div>
        
        <div class="form-group">
          <label class="form-label">Format</label>
          <div class="space-y-2">
            <label class="inline-flex items-center">
              <input type="radio" name="format" value="csv" class="form-radio" checked>
              <span class="ml-2">CSV Format</span>
            </label>
            <label class="inline-flex items-center">
              <input type="radio" name="format" value="json" class="form-radio">
              <span class="ml-2">JSON Format</span>
            </label>
          </div>
        </div>
      </form>
    </div>
    <div class="modal-footer">
      <button id="start-export" class="btn btn-primary">Export Questions</button>
      <button id="cancel-export" class="btn btn-outline">Cancel</button>
    </div>
  </div>
</div>

<!-- Custom Styles -->
<style>
  .card {
    @apply bg-white rounded-lg shadow-md overflow-hidden;
  }
  
  .card-body {
    @apply p-6;
  }
  
  .form-group {
    @apply mb-4;
  }
  
  .form-label {
    @apply block text-sm font-medium text-gray-700 mb-1;
  }
  
  .form-label.required::after {
    content: "*";
    @apply text-red-500 ml-1;
  }
  
  .form-input, .form-select, .form-textarea {
    @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm;
  }
  
  .form-range {
    @apply w-full;
  }
  
  .btn {
    @apply inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
  }
  
  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700;
  }
  
  .btn-secondary {
    @apply bg-gray-600 text-white hover:bg-gray-700;
  }
  
  .btn-danger {
    @apply bg-red-600 text-white hover:bg-red-700;
  }
  
  .btn-outline {
    @apply bg-white text-gray-700 border-gray-300 hover:bg-gray-50;
  }
  
  .btn-sm {
    @apply px-3 py-1 text-xs;
  }
  
  .modal {
    @apply fixed inset-0 z-50 overflow-y-auto;
  }
  
  .modal-overlay {
    @apply fixed inset-0 bg-black bg-opacity-50;
  }
  
  .modal-container {
    @apply bg-white rounded-lg shadow-xl mx-auto my-8 max-w-5xl max-h-full overflow-hidden relative;
  }
  
  .modal-header {
    @apply px-6 py-4 bg-white border-b border-gray-200 flex justify-between items-center;
  }
  
  .modal-close {
    @apply text-gray-400 hover:text-gray-500;
  }
  
  .modal-body {
    @apply px-6 py-4 max-h-[calc(100vh-200px)] overflow-y-auto;
  }
  
  .modal-footer {
    @apply px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-end space-x-3;
  }
  
  .th-cell {
    @apply px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;
  }
  
  .td-cell {
    @apply px-4 py-3 whitespace-nowrap text-sm;
  }
  
  .cert-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800;
  }
  
  .domain-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800;
  }
  
  .difficulty-indicator {
    @apply flex space-x-1;
  }
  
  .difficulty-dot {
    @apply w-2 h-2 rounded-full bg-gray-200;
  }
  
  .difficulty-dot.active {
    @apply bg-blue-600;
  }
  
  .status-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }
  
  .status-badge.active {
    @apply bg-green-100 text-green-800;
  }
  
  .status-badge.inactive {
    @apply bg-gray-100 text-gray-800;
  }
  
  .action-btn {
    @apply p-1 text-gray-500 hover:text-blue-600 focus:outline-none;
  }
  
  .pagination {
    @apply flex justify-between items-center py-3 px-4 bg-white border-t border-gray-200 sm:px-6;
  }
  
  .pagination-info {
    @apply text-sm text-gray-700;
  }
  
  .pagination-controls {
    @apply flex space-x-1;
  }
  
  .pagination-btn {
    @apply relative inline-flex items-center px-3 py-1 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50;
  }
  
  .pagination-btn.active {
    @apply bg-blue-50 text-blue-600 border-blue-500;
  }
  
  .pagination-btn.disabled {
    @apply opacity-50 cursor-not-allowed bg-gray-100;
  }
  
  .pagination-ellipsis {
    @apply px-3 py-1 text-gray-500;
  }
  
  .question-preview {
    @apply text-gray-800;
  }
  
  .analytics-preview {
    @apply text-sm;
  }
  
  .file-input-container {
    @apply mt-1;
  }
  
  .file-input-ui {
    @apply text-center;
  }
  
  .file-drop-area {
    @apply border-2 border-dashed border-gray-300 rounded-lg p-8 flex flex-col items-center justify-center cursor-pointer hover:border-gray-400 transition-colors;
  }
  
  .spinner {
    @apply w-8 h-8 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto;
  }
  
  .stats-card {
    @apply bg-gray-50 rounded-lg p-4;
  }
  
  .stats-grid {
    @apply grid grid-cols-2 gap-4;
  }
  
  .stat-item {
    @apply text-center;
  }
  
  .stat-label {
    @apply text-xs text-gray-500 mb-1;
  }
  
  .stat-value {
    @apply text-lg font-semibold text-gray-800;
  }
  
  .difficulty-display {
    @apply flex justify-center space-x-1;
  }
  
  .question-preview-box {
    @apply bg-gray-50 p-4 rounded-lg border border-gray-200;
  }
  
  .hidden {
    @apply hidden;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const questionModal = document.getElementById('question-modal');
    const importModal = document.getElementById('import-modal');
    const exportModal = document.getElementById('export-modal');
    const statsModal = document.getElementById('stats-modal');
    const deleteModal = document.getElementById('delete-modal');
    
    // Question modal elements
    const modalTitle = document.getElementById('modal-title');
    const questionForm = document.getElementById('question-form');
    const questionId = document.getElementById('question-id');
    const questionCertification = document.getElementById('question-certification');
    const questionDomain = document.getElementById('question-domain');
    const optionsContainer = document.getElementById('options-container');
    const correctAnswers = document.getElementById('correct-answers');
    const addOptionBtn = document.getElementById('add-option');
    
    // Button event listeners
    document.getElementById('add-question').addEventListener('click', openAddQuestionModal);
    document.getElementById('import-questions').addEventListener('click', openImportModal);
    document.getElementById('export-questions').addEventListener('click', openExportModal);
    document.getElementById('close-modal').addEventListener('click', closeQuestionModal);
    document.getElementById('cancel-question').addEventListener('click', closeQuestionModal);
    document.getElementById('close-import-modal').addEventListener('click', closeImportModal);
    document.getElementById('cancel-import').addEventListener('click', closeImportModal);
    document.getElementById('close-export-modal').addEventListener('click', closeExportModal);
    document.getElementById('cancel-export').addEventListener('click', closeExportModal);
    document.getElementById('close-stats-modal').addEventListener('click', closeStatsModal);
    document.getElementById('close-stats').addEventListener('click', closeStatsModal);
    document.getElementById('close-delete-modal').addEventListener('click', closeDeleteModal);
    document.getElementById('cancel-delete').addEventListener('click', closeDeleteModal);
    
    // Add click handlers for edit/stats/delete buttons
    document.querySelectorAll('.edit-question').forEach(btn => {
      btn.addEventListener('click', () => editQuestion(btn.dataset.id));
    });
    
    document.querySelectorAll('.view-stats').forEach(btn => {
      btn.addEventListener('click', () => viewQuestionStats(btn.dataset.id));
    });
    
    document.querySelectorAll('.delete-question').forEach(btn => {
      btn.addEventListener('click', () => confirmDeleteQuestion(btn.dataset.id));
    });
    
    // Form submission handlers
    document.getElementById('question-form').addEventListener('submit', handleQuestionFormSubmit);
    document.getElementById('save-question').addEventListener('click', () => questionForm.requestSubmit());
    document.getElementById('start-import').addEventListener('click', handleImport);
    document.getElementById('start-export').addEventListener('click', handleExport);
    document.getElementById('confirm-delete').addEventListener('click', handleDeleteQuestion);
    
    // File input handling
    const fileInput = document.getElementById('import-file');
    const fileNameDisplay = document.getElementById('file-name');
    const browseFileBtn = document.getElementById('browse-file');
    const fileDropArea = document.querySelector('.file-drop-area');
    
    browseFileBtn.addEventListener('click', () => fileInput.click());
    
    fileInput.addEventListener('change', () => {
      if (fileInput.files.length > 0) {
        fileNameDisplay.textContent = fileInput.files[0].name;
      } else {
        fileNameDisplay.textContent = 'Drag & drop or click to select CSV file';
      }
    });
    
    fileDropArea.addEventListener('dragover', (e) => {
      e.preventDefault();
      fileDropArea.classList.add('border-blue-400', 'bg-blue-50');
    });
    
    fileDropArea.addEventListener('dragleave', () => {
      fileDropArea.classList.remove('border-blue-400', 'bg-blue-50');
    });
    
    fileDropArea.addEventListener('drop', (e) => {
      e.preventDefault();
      fileDropArea.classList.remove('border-blue-400', 'bg-blue-50');
      
      if (e.dataTransfer.files.length > 0) {
        fileInput.files = e.dataTransfer.files;
        fileNameDisplay.textContent = e.dataTransfer.files[0].name;
      }
    });
    
    // Domain loading based on certification selection
    questionCertification.addEventListener('change', loadDomains);
    document.getElementById('export-certification').addEventListener('change', loadExportDomains);
    
    // Option management
    addOptionBtn.addEventListener('click', addOption);
    
    // Open add question modal
    function openAddQuestionModal() {
      modalTitle.textContent = 'Add New Question';
      questionId.value = '';
      questionForm.reset();
      optionsContainer.innerHTML = '';
      correctAnswers.innerHTML = '';
      
      // Add initial options
      addOption();
    //   addOption();
      
      questionModal.classList.remove('hidden');
    }
    
    // Open edit question modal
    function editQuestion(id) {
      modalTitle.textContent = 'Edit Question';
      
      // Fetch question data
      fetch(`/admin/questions/${id}`)
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            const question = data.question;
            
            // Set form values
            questionId.value = question._id;
            document.getElementById('question-text').value = question.text;
            document.getElementById('question-explanation').value = question.explanation || '';
            document.getElementById('question-difficulty').value = question.difficulty || 3;
            document.getElementById('question-tags').value = question.tags ? question.tags.join(', ') : '';
            
            // Set certification and load domains
            questionCertification.value = question.certificationId;
            loadDomains().then(() => {
              questionDomain.value = question.domain;
            });
            
            // Set options
            optionsContainer.innerHTML = '';
            question.options.forEach(option => {
              addOption(option.id, option.text);
            });
            
            // Set correct answers after a delay to ensure options are loaded
            setTimeout(() => {
              updateCorrectAnswers(question.correctAnswers);
            }, 100);
            
            questionModal.classList.remove('hidden');
          } else {
            showAlert('Error loading question', 'error');
          }
        })
        .catch(error => {
          console.error('Error fetching question:', error);
          showAlert('Error loading question', 'error');
        });
    }
    
    // Load domains based on selected certification
    function loadDomains() {
      const certId = questionCertification.value;
      questionDomain.innerHTML = '<option value="">Select Domain (Choose certification first)</option>';
      
      if (!certId) return Promise.resolve();
      
      return fetch(`/admin/certifications/${certId}/domains`)
        .then(response => response.json())
        .then(data => {
          if (data.success && data.domains) {
            data.domains.forEach(domain => {
              const option = document.createElement('option');
              option.value = domain.name;
              option.textContent = domain.name;
              questionDomain.appendChild(option);
            });
          }
        })
        .catch(error => {
          console.error('Error loading domains:', error);
        });
    }
    
    // Load domains for export modal
    function loadExportDomains() {
      const certId = document.getElementById('export-certification').value;
      const domainSelect = document.getElementById('export-domain');
      domainSelect.innerHTML = '<option value="">All Domains</option>';
      
      if (!certId) return;
      
      fetch(`/admin/certifications/${certId}/domains`)
        .then(response => response.json())
        .then(data => {
          if (data.success && data.domains) {
            data.domains.forEach(domain => {
              const option = document.createElement('option');
              option.value = domain.name;
              option.textContent = domain.name;
              domainSelect.appendChild(option);
            });
          }
        })
        .catch(error => {
          console.error('Error loading domains for export:', error);
        });
    }
    
    // Add option to the question
    function addOption(id, text) {
      const optionId = id || String.fromCharCode(65 + optionsContainer.children.length); // A, B, C, etc.
      const optionIndex = optionsContainer.children.length;
      
      const optionDiv = document.createElement('div');
      optionDiv.className = 'option-item flex items-center space-x-2';
      optionDiv.innerHTML = `
        <div class="option-label flex-shrink-0 w-8 h-8 flex items-center justify-center bg-gray-100 rounded-full">
          ${optionId}
        </div>
        <div class="flex-grow">
          <input type="text" class="form-input option-text" placeholder="Option text" 
                 value="${text || ''}" required name="option_${optionIndex}_text">
          <input type="hidden" name="option_${optionIndex}_id" value="${optionId}">
        </div>
        <button type="button" class="remove-option text-gray-400 hover:text-red-500">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      optionsContainer.appendChild(optionDiv);
      
      // Add remove event listener
      optionDiv.querySelector('.remove-option').addEventListener('click', function() {
        if (optionsContainer.children.length > 2) {
          optionDiv.remove();
          updateCorrectAnswers();
          renumberOptions();
        } else {
          showAlert('Questions must have at least 2 options', 'warning');
        }
      });
      
      // Update correct answers checkboxes
      updateCorrectAnswers();
    }
    
    // Renumber options after removal
    function renumberOptions() {
      // Just update the hidden input names
      const options = optionsContainer.querySelectorAll('.option-item');
      options.forEach((option, index) => {
        option.querySelector('.option-text').name = `option_${index}_text`;
        option.querySelector('input[type="hidden"]').name = `option_${index}_id`;
      });
    }
    
    // Update correct answers section
    function updateCorrectAnswers(selectedAnswers = []) {
      correctAnswers.innerHTML = '';
      
      const options = optionsContainer.querySelectorAll('.option-item');
      options.forEach(option => {
        const optionId = option.querySelector('input[type="hidden"]').value;
        const optionText = option.querySelector('.option-text').value;
        const displayText = optionText.length > 30 ? optionText.substring(0, 30) + '...' : optionText;
        
        const checkboxDiv = document.createElement('div');
        checkboxDiv.className = 'flex items-center';
        checkboxDiv.innerHTML = `
          <input type="checkbox" id="correct_${optionId}" name="correctAnswers[]" value="${optionId}"
                 class="form-checkbox h-4 w-4 text-blue-600" ${selectedAnswers.includes(optionId) ? 'checked' : ''}>
          <label for="correct_${optionId}" class="ml-2 text-sm text-gray-700">
            ${optionId}: ${displayText || '[Empty]'}
          </label>
        `;
        
        correctAnswers.appendChild(checkboxDiv);
      });
    }
    
    // Handle question form submission
    function handleQuestionFormSubmit(e) {
      e.preventDefault();
      
      // Validate form
      if (!validateQuestionForm()) {
        return;
      }
      
      // Collect form data
      const formData = new FormData(questionForm);
      
      // Process options
      const options = [];
      const optionElements = optionsContainer.querySelectorAll('.option-item');
      optionElements.forEach((optionEl, index) => {
        const id = optionEl.querySelector('input[type="hidden"]').value;
        const text = optionEl.querySelector('.option-text').value;
        options.push({ id, text });
      });
      
      // Process correct answers
      const correctAnswersChecked = [];
      document.querySelectorAll('input[name="correctAnswers[]"]:checked').forEach(checkbox => {
        correctAnswersChecked.push(checkbox.value);
      });
      
      // Process tags
      const tagsInput = document.getElementById('question-tags').value;
      const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()).filter(Boolean) : [];
      
      // Build request data
      const requestData = {
        id: formData.get('id') || undefined,
        certificationId: formData.get('certificationId'),
        domain: formData.get('domain'),
        text: formData.get('text'),
        options: JSON.stringify(options),
        correctAnswers: JSON.stringify(correctAnswersChecked),
        explanation: formData.get('explanation'),
        difficulty: formData.get('difficulty'),
        tags: JSON.stringify(tags)
      };
      
      // Send request
      fetch('/admin/questions/save', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestData)
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          closeQuestionModal();
          showAlert('Question saved successfully', 'success');
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showAlert(data.message || 'Error saving question', 'error');
        }
      })
      .catch(error => {
        console.error('Error saving question:', error);
        showAlert('Error saving question', 'error');
      });
    }
    
    // Validate question form
    function validateQuestionForm() {
      // Check required fields
      if (!questionCertification.value) {
        showAlert('Please select a certification', 'error');
        questionCertification.focus();
        return false;
      }
      
      if (!questionDomain.value) {
        showAlert('Please select a domain', 'error');
        questionDomain.focus();
        return false;
      }
      
      if (!document.getElementById('question-text').value.trim()) {
        showAlert('Question text is required', 'error');
        document.getElementById('question-text').focus();
        return false;
      }
      
      // Check options
      const options = optionsContainer.querySelectorAll('.option-item');
      if (options.length < 2) {
        showAlert('At least 2 options are required', 'error');
        return false;
      }
      
      let hasEmptyOption = false;
      options.forEach(option => {
        if (!option.querySelector('.option-text').value.trim()) {
          hasEmptyOption = true;
        }
      });
      
      if (hasEmptyOption) {
        showAlert('All options must have text', 'error');
        return false;
      }
      
      // Check correct answers
      const correctSelected = document.querySelectorAll('input[name="correctAnswers[]"]:checked').length;
      if (correctSelected === 0) {
        showAlert('Please select at least one correct answer', 'error');
        return false;
      }
      
      return true;
    }
    
    // View question statistics
    function viewQuestionStats(id) {
      statsModal.classList.remove('hidden');
      document.getElementById('stats-loading').classList.remove('hidden');
      document.getElementById('stats-content').classList.add('hidden');
      document.getElementById('stats-empty').classList.add('hidden');
      
      fetch(`/admin/questions/${id}/stats`)
        .then(response => response.json())
        .then(data => {
          document.getElementById('stats-loading').classList.add('hidden');
          
          if (data.success) {
            if (data.stats.totalAttempts > 0) {
              renderQuestionStats(data.question, data.stats);
              document.getElementById('stats-content').classList.remove('hidden');
            } else {
              document.getElementById('stats-empty').classList.remove('hidden');
            }
          } else {
            showAlert(data.message || 'Error loading question statistics', 'error');
            closeStatsModal();
          }
        })
        .catch(error => {
          console.error('Error loading question stats:', error);
          showAlert('Error loading question statistics', 'error');
          closeStatsModal();
        });
    }
    
    // Render question statistics
    function renderQuestionStats(question, stats) {
      // Set question info
      document.getElementById('stats-question-text').textContent = question.text;
      
      // Set summary statistics
      document.getElementById('stats-attempts').textContent = stats.totalAttempts;
      document.getElementById('stats-correct-pct').textContent = `${stats.correctPercentage.toFixed(1)}%`;
      document.getElementById('stats-avg-time').textContent = `${Math.round(stats.avgTimeSpent)}s`;
      
      // Set difficulty indicators
      const difficultyDots = document.querySelectorAll('#stats-difficulty .difficulty-dot');
      const calculatedDifficulty = Math.round(stats.avgDifficulty || question.difficulty);
      
      difficultyDots.forEach((dot, index) => {
        dot.classList.toggle('active', index < calculatedDifficulty);
      });
      
      // Render time distribution (simplified version without charts)
      const timeDistribution = document.getElementById('time-distribution-chart');
      timeDistribution.innerHTML = `
        <div class="flex flex-col h-full justify-end">
          <div class="flex items-end justify-around h-32 mb-2">
            <div class="w-1/4 mx-1">
              <div class="bg-blue-400 rounded-t" style="height: ${stats.timeDistribution.under30s / stats.totalAttempts * 100}%"></div>
            </div>
            <div class="w-1/4 mx-1">
              <div class="bg-blue-500 rounded-t" style="height: ${stats.timeDistribution.under60s / stats.totalAttempts * 100}%"></div>
            </div>
            <div class="w-1/4 mx-1">
              <div class="bg-blue-600 rounded-t" style="height: ${stats.timeDistribution.under120s / stats.totalAttempts * 100}%"></div>
            </div>
            <div class="w-1/4 mx-1">
              <div class="bg-blue-700 rounded-t" style="height: ${stats.timeDistribution.over120s / stats.totalAttempts * 100}%"></div>
            </div>
          </div>
          <div class="flex justify-around text-xs text-gray-600">
            <div class="text-center">0-30s</div>
            <div class="text-center">30-60s</div>
            <div class="text-center">1-2m</div>
            <div class="text-center">2m+</div>
          </div>
        </div>
      `;
      
      // Render option distribution
      const optionsStatsContainer = document.getElementById('options-stats-container');
      optionsStatsContainer.innerHTML = '';
      
      stats.optionDistribution.forEach(option => {
        const optionDiv = document.createElement('div');
        optionDiv.className = 'option-stat';
        optionDiv.innerHTML = `
          <div class="flex justify-between mb-1">
            <span class="text-sm font-medium text-gray-700">Option ${option.id}</span>
            <span class="text-sm text-gray-500">${option.count} (${option.percentage.toFixed(1)}%)</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2.5">
            <div class="bg-blue-600 h-2.5 rounded-full" style="width: ${option.percentage}%"></div>
          </div>
          <div class="mt-1 mb-3 text-xs text-gray-600 truncate">${option.text}</div>
        `;
        
        optionsStatsContainer.appendChild(optionDiv);
      });
    }
    
    // Confirm question deletion
    function confirmDeleteQuestion(id) {
      // Reset modal
      deleteModal.classList.remove('hidden');
      document.getElementById('delete-warning').classList.add('hidden');
      
      // Set delete button action
      document.getElementById('confirm-delete').dataset.id = id;
      
      // Check if question has been used
      fetch(`/admin/questions/${id}/stats`)
        .then(response => response.json())
        .then(data => {
          if (data.success && data.stats.totalAttempts > 0) {
            document.getElementById('delete-warning').classList.remove('hidden');
          }
        })
        .catch(error => {
          console.error('Error checking question usage:', error);
        });
    }
    
    // Handle question deletion
    function handleDeleteQuestion() {
      const id = document.getElementById('confirm-delete').dataset.id;
      
      fetch(`/admin/questions/${id}`, {
        method: 'DELETE'
      })
      .then(response => response.json())
      .then(data => {
        closeDeleteModal();
        
        if (data.success) {
          showAlert(data.deactivated ? 
            'Question has been deactivated' : 
            'Question deleted successfully', 'success');
          
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showAlert(data.message || 'Error deleting question', 'error');
        }
      })
      .catch(error => {
        console.error('Error deleting question:', error);
        showAlert('Error deleting question', 'error');
        closeDeleteModal();
      });
    }
    
    // Handle import
    function handleImport() {
      const fileInput = document.getElementById('import-file');
      const certificationId = document.getElementById('import-certification').value;
      
      if (!certificationId) {
        showAlert('Please select a certification', 'error');
        return;
      }
      
      if (!fileInput.files || fileInput.files.length === 0) {
        showAlert('Please select a CSV file', 'error');
        return;
      }
      
      const formData = new FormData();
      formData.append('file', fileInput.files[0]);
      formData.append('certificationId', certificationId);
      
      fetch('/admin/questions/import', {
        method: 'POST',
        body: formData
      })
      .then(response => response.json())
      .then(data => {
        closeImportModal();
        
        if (data.success) {
          showAlert(`${data.imported} questions imported successfully`, 'success');
          
          if (data.errors && data.errors.length > 0) {
            console.warn('Import had some errors:', data.errors);
            // Could show detailed errors in a separate modal
          }
          
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showAlert(data.message || 'Error importing questions', 'error');
        }
      })
      .catch(error => {
        console.error('Error importing questions:', error);
        showAlert('Error importing questions', 'error');
        closeImportModal();
      });
    }
    
    // Handle export
    function handleExport() {
      const certificationId = document.getElementById('export-certification').value;
      const domain = document.getElementById('export-domain').value;
      const format = document.querySelector('input[name="format"]:checked').value;
      
      let url = `/admin/questions/export?format=${format}`;
      if (certificationId) url += `&certificationId=${certificationId}`;
      if (domain) url += `&domain=${domain}`;
      
      // Start download
      window.location.href = url;
      closeExportModal();
    }
    
    // Modal control functions
    function closeQuestionModal() {
      questionModal.classList.add('hidden');
    }
    
    function closeImportModal() {
      importModal.classList.add('hidden');
      document.getElementById('import-form').reset();
      document.getElementById('file-name').textContent = 'Drag & drop or click to select CSV file';
    }
    
    function closeExportModal() {
      exportModal.classList.add('hidden');
    }
    
    function closeStatsModal() {
      statsModal.classList.add('hidden');
    }
    
    function closeDeleteModal() {
      deleteModal.classList.add('hidden');
    }
    
    function openImportModal() {
      importModal.classList.remove('hidden');
    }
    
    function openExportModal() {
      exportModal.classList.remove('hidden');
      // Reset domain dropdown
      document.getElementById('export-domain').innerHTML = '<option value="">All Domains</option>';
    }
    
    // Show alert notification
    function showAlert(message, type = 'info') {
      // Create alert element if it doesn't exist
      let alertContainer = document.getElementById('alert-container');
      if (!alertContainer) {
        alertContainer = document.createElement('div');
        alertContainer.id = 'alert-container';
        alertContainer.className = 'fixed top-4 right-4 z-50 flex flex-col space-y-2';
        document.body.appendChild(alertContainer);
      }
      
      // Create alert
      const alert = document.createElement('div');
      alert.className = `alert alert-${type} transform transition-all duration-300 translate-x-full`;
      alert.innerHTML = `
        <div class="flex items-center">
          <div class="flex-shrink-0">
            ${type === 'success' ? 
              '<i class="fas fa-check-circle text-green-500"></i>' : 
              type === 'error' ? 
              '<i class="fas fa-exclamation-circle text-red-500"></i>' :
              '<i class="fas fa-info-circle text-blue-500"></i>'
            }
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium">${message}</p>
          </div>
          <div class="ml-auto pl-3">
            <button class="alert-close">
              <i class="fas fa-times text-gray-400 hover:text-gray-500"></i>
            </button>
          </div>
        </div>
      `;
      
      // Add alert styles based on type
      if (type === 'success') {
        alert.classList.add('bg-green-50', 'border-green-100', 'text-green-800');
      } else if (type === 'error') {
        alert.classList.add('bg-red-50', 'border-red-100', 'text-red-800');
      } else if (type === 'warning') {
        alert.classList.add('bg-yellow-50', 'border-yellow-100', 'text-yellow-800');
      } else {
        alert.classList.add('bg-blue-50', 'border-blue-100', 'text-blue-800');
      }
      
      // Add base alert styles
      alert.classList.add('rounded-md', 'p-4', 'border', 'shadow-md', 'w-80');
      
      // Add to container
      alertContainer.appendChild(alert);
      
      // Animate in
      setTimeout(() => {
        alert.classList.remove('translate-x-full');
      }, 10);
      
      // Add close handler
      alert.querySelector('.alert-close').addEventListener('click', () => {
        alert.classList.add('translate-x-full');
        setTimeout(() => {
          alert.remove();
        }, 300);
      });
      
      // Auto dismiss after 5 seconds
      setTimeout(() => {
        if (alert.parentNode) {
          alert.classList.add('translate-x-full');
          setTimeout(() => {
            alert.remove();
          }, 300);
        }
      }, 5000);
    }
  });
</script>

<%- include('../layouts/footer') %>