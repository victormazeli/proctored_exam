<!-- views/admin/users.ejs -->
<%- include('../layouts/admin-layout', { title: title }) %>

<div class="admin-users">
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold text-gray-800">User Management</h1>
      <div class="search-box">
        <form action="/admin/users" method="GET" class="flex">
          <div class="relative flex-grow mr-2">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <i class="fas fa-search text-gray-400"></i>
            </div>
            <input type="text" name="search" class="form-input py-2 pl-10 pr-4 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" placeholder="Search by username or email" value="<%= search %>">
          </div>
          <button type="submit" class="btn btn-secondary">
            Search
          </button>
        </form>
      </div>
    </div>

    <!-- Users Table -->
    <div class="card">
      <div class="card-body p-0">
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead>
              <tr>
                <th class="th-cell">User</th>
                <th class="th-cell">Role</th>
                <th class="th-cell">Created</th>
                <th class="th-cell">Activity</th>
                <th class="th-cell">Metrics</th>
                <th class="th-cell">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (users && users.length > 0) { %>
                <% users.forEach(user => { %>
                  <tr class="hover:bg-gray-50 border-b border-gray-200">
                    <td class="td-cell">
                      <div class="flex items-center">
                        <div class="user-avatar">
                          <span class="avatar-placeholder">
                            <%= user.username.substring(0, 2).toUpperCase() %>
                          </span>
                        </div>
                        <div class="ml-4">
                          <div class="text-sm font-medium text-gray-900">
                            <%= user.profile?.name || user.username %>
                          </div>
                          <div class="text-sm text-gray-500">
                            <%= user.email %>
                          </div>
                        </div>
                      </div>
                    </td>
                    <td class="td-cell">
                      <span class="role-badge role-<%= user.role %>">
                        <%= user.role === 'admin' ? 'Admin' : 'User' %>
                      </span>
                    </td>
                    <td class="td-cell">
                      <div class="text-sm text-gray-900">
                        <%= new Date(user.createdAt).toLocaleDateString() %>
                      </div>
                      <div class="text-xs text-gray-500">
                        <%= new Date(user.createdAt).toLocaleTimeString() %>
                      </div>
                    </td>
                    <td class="td-cell">
                      <div class="text-sm text-gray-900">
                        <% if (user.lastLogin) { %>
                          Last login: <%= new Date(user.lastLogin).toLocaleDateString() %>
                        <% } else { %>
                          Never logged in
                        <% } %>
                      </div>
                    </td>
                    <td class="td-cell">
                      <div class="metrics-grid">
                        <div class="metric-item">
                          <div class="metric-value">
                            <%= user.metrics?.totalAttempts || 0 %>
                          </div>
                          <div class="metric-label">Attempts</div>
                        </div>
                        <div class="metric-item">
                          <div class="metric-value">
                            <%= user.metrics?.examsPassed || 0 %>
                          </div>
                          <div class="metric-label">Passed</div>
                        </div>
                        <div class="metric-item">
                          <div class="metric-value">
                            <%= user.metrics?.averageScore ? Math.round(user.metrics.averageScore) : 0 %>%
                          </div>
                          <div class="metric-label">Avg. Score</div>
                        </div>
                        <div class="metric-item">
                          <div class="metric-value">
                            <%= formatTime(user.metrics?.totalTimeSpent || 0) %>
                          </div>
                          <div class="metric-label">Time</div>
                        </div>
                      </div>
                    </td>
                    <td class="td-cell">
                      <div class="flex space-x-2">
                        <button class="action-btn view-user" data-id="<%= user._id %>" title="View Details">
                          <i class="fas fa-eye"></i>
                        </button>
                        <% if (user.role !== 'admin') { %>
                          <button class="action-btn promote-user" data-id="<%= user._id %>" 
                                  data-username="<%= user.username %>" data-role="admin" title="Promote to Admin">
                            <i class="fas fa-user-shield"></i>
                          </button>
                        <% } else { %>
                          <button class="action-btn demote-user" data-id="<%= user._id %>" 
                                  data-username="<%= user.username %>" data-role="user" title="Demote to User">
                            <i class="fas fa-user"></i>
                          </button>
                        <% } %>
                        <a href="/admin/analytics/user/<%= user._id %>" class="action-btn" title="View Analytics">
                          <i class="fas fa-chart-line"></i>
                        </a>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="6" class="py-8 text-center text-gray-500">
                    No users found matching your criteria
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>

        <!-- Pagination -->
        <% if (pagination.totalPages > 1) { %>
          <div class="pagination">
            <div class="pagination-info">
              Showing <%= (pagination.page - 1) * pagination.limit + 1 %> to 
              <%= Math.min(pagination.page * pagination.limit, pagination.totalUsers) %> 
              of <%= pagination.totalUsers %> users
            </div>
            <div class="pagination-controls">
              <% if (pagination.page > 1) { %>
                <a href="?page=<%= pagination.page - 1 %>&limit=<%= pagination.limit %><%= search ? '&search=' + search : '' %>" class="pagination-btn">
                  <i class="fas fa-chevron-left"></i>
                </a>
              <% } else { %>
                <span class="pagination-btn disabled">
                  <i class="fas fa-chevron-left"></i>
                </span>
              <% } %>
              
              <% 
                let startPage = Math.max(1, pagination.page - 2);
                let endPage = Math.min(pagination.totalPages, pagination.page + 2);
                
                if (startPage > 1) { %>
                  <a href="?page=1&limit=<%= pagination.limit %><%= search ? '&search=' + search : '' %>" class="pagination-btn">1</a>
                  <% if (startPage > 2) { %>
                    <span class="pagination-ellipsis">...</span>
                  <% } %>
                <% } %>
                
                <% for (let i = startPage; i <= endPage; i++) { %>
                  <a href="?page=<%= i %>&limit=<%= pagination.limit %><%= search ? '&search=' + search : '' %>" class="pagination-btn <%= pagination.page === i ? 'active' : '' %>">
                    <%= i %>
                  </a>
                <% } %>
                
                <% if (endPage < pagination.totalPages) { %>
                  <% if (endPage < pagination.totalPages - 1) { %>
                    <span class="pagination-ellipsis">...</span>
                  <% } %>
                  <a href="?page=<%= pagination.totalPages %>&limit=<%= pagination.limit %><%= search ? '&search=' + search : '' %>" class="pagination-btn"><%= pagination.totalPages %></a>
                <% } %>
                
                <% if (pagination.page < pagination.totalPages) { %>
                  <a href="?page=<%= pagination.page + 1 %>&limit=<%= pagination.limit %><%= search ? '&search=' + search : '' %>" class="pagination-btn">
                    <i class="fas fa-chevron-right"></i>
                  </a>
                <% } else { %>
                  <span class="pagination-btn disabled">
                    <i class="fas fa-chevron-right"></i>
                  </span>
                <% } %>
            </div>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- User Details Modal -->
<div id="user-modal" class="modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-container">
    <div class="modal-header">
      <h2 id="modal-title">User Details</h2>
      <button id="close-modal" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <div id="user-loading" class="text-center py-8">
        <div class="spinner"></div>
        <p class="mt-2 text-gray-600">Loading user details...</p>
      </div>
      
      <div id="user-content" class="hidden">
        <div class="user-profile-header">
          <div class="user-avatar-large">
            <span id="user-avatar-placeholder" class="avatar-placeholder-large">
              AB
            </span>
          </div>
          <div class="user-info">
            <h3 id="user-fullname" class="text-xl font-semibold text-gray-800">User Name</h3>
            <div id="user-username" class="text-gray-500">username</div>
            <div id="user-email" class="text-blue-600">user@example.com</div>
            <div class="mt-2">
              <span id="user-role-badge" class="role-badge role-user">User</span>
            </div>
          </div>
        </div>
        
        <div class="divider"></div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4">
          <div class="user-details-section">
            <h4 class="section-title">Account Information</h4>
            <div class="detail-group">
              <div class="detail-label">Account Created</div>
              <div id="user-created" class="detail-value">Jan 1, 2023</div>
            </div>
            <div class="detail-group">
              <div class="detail-label">Last Login</div>
              <div id="user-last-login" class="detail-value">Jan 1, 2023</div>
            </div>
            <div class="detail-group">
              <div class="detail-label">Account Status</div>
              <div id="user-status" class="detail-value">Active</div>
            </div>
            <div class="detail-group">
              <div class="detail-label">Proctor Settings</div>
              <div id="user-proctor-settings" class="detail-value">Enabled</div>
            </div>
          </div>
          
          <div class="user-details-section">
            <h4 class="section-title">Usage Statistics</h4>
            <div class="user-stats-grid">
              <div class="user-stat-card">
                <div id="user-stat-attempts" class="stat-number">0</div>
                <div class="stat-label">Total Attempts</div>
              </div>
              <div class="user-stat-card">
                <div id="user-stat-passed" class="stat-number">0</div>
                <div class="stat-label">Exams Passed</div>
              </div>
              <div class="user-stat-card">
                <div id="user-stat-score" class="stat-number">0%</div>
                <div class="stat-label">Average Score</div>
              </div>
              <div class="user-stat-card">
                <div id="user-stat-time" class="stat-number">0h</div>
                <div class="stat-label">Total Time</div>
              </div>
            </div>
            <div class="mt-4 text-center">
              <a id="user-analytics-link" href="#" class="text-blue-600 hover:text-blue-800 text-sm">
                View detailed analytics →
              </a>
            </div>
          </div>
        </div>
        
        <div class="divider"></div>
        
        <div id="certification-progress-section">
          <h4 class="section-title mb-4">Certification Progress</h4>
          <div id="certification-progress-container" class="certification-progress-list">
            <!-- Certification progress items will be added dynamically -->
          </div>
          
          <div id="no-certifications" class="hidden text-center py-4 text-gray-500">
            No certification attempts yet
          </div>
        </div>
        
        <div class="divider"></div>
        
        <div class="recent-activity-section">
          <h4 class="section-title mb-4">Recent Activity</h4>
          <div id="recent-activity-container" class="recent-activity-list">
            <!-- Activity items will be added dynamically -->
          </div>
          
          <div id="no-activity" class="hidden text-center py-4 text-gray-500">
            No recent activity
          </div>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <div class="flex space-x-3">
        <a id="view-user-attempts" href="#" class="btn btn-outline">
          <i class="fas fa-history mr-2"></i> View Attempts
        </a>
        <button id="close-user-details" class="btn btn-outline">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Role Change Confirmation Modal -->
<div id="role-modal" class="modal hidden">
  <div class="modal-overlay"></div>
  <div class="modal-container max-w-md">
    <div class="modal-header">
      <h2 id="role-modal-title">Change User Role</h2>
      <button id="close-role-modal" class="modal-close">
        <i class="fas fa-times"></i>
      </button>
    </div>
    <div class="modal-body">
      <p id="role-change-message" class="text-gray-700">
        Are you sure you want to change this user's role?
      </p>
      
      <div class="mt-4 bg-yellow-50 border-l-4 border-yellow-400 p-4">
        <div class="flex">
          <div class="flex-shrink-0">
            <i class="fas fa-exclamation-triangle text-yellow-400"></i>
          </div>
          <div class="ml-3">
            <p class="text-sm text-yellow-700">
              Changing a user's role affects their permissions and access levels.
              This action will take effect immediately.
            </p>
          </div>
        </div>
      </div>
    </div>
    <div class="modal-footer">
      <button id="confirm-role-change" class="btn btn-primary">Change Role</button>
      <button id="cancel-role-change" class="btn btn-outline">Cancel</button>
    </div>
  </div>
</div>

<!-- Helper Function for formatting time -->
<%
function formatTime(seconds) {
  if (!seconds) return '0h';
  
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  
  if (hours > 0) {
    return `${hours}h ${minutes}m`;
  } else {
    return `${minutes}m`;
  }
}
%>

<!-- Custom Styles -->
<style>
  .card {
    @apply bg-white rounded-lg shadow-md overflow-hidden;
  }
  
  .card-body {
    @apply p-6;
  }
  
  .form-input {
    @apply block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm;
  }
  
  .btn {
    @apply inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500;
  }
  
  .btn-primary {
    @apply bg-blue-600 text-white hover:bg-blue-700;
  }
  
  .btn-secondary {
    @apply bg-gray-600 text-white hover:bg-gray-700;
  }
  
  .btn-outline {
    @apply bg-white text-gray-700 border-gray-300 hover:bg-gray-50;
  }
  
  .modal {
    @apply fixed inset-0 z-50 overflow-y-auto;
  }
  
  .modal-overlay {
    @apply fixed inset-0 bg-black bg-opacity-50;
  }
  
  .modal-container {
    @apply bg-white rounded-lg shadow-xl mx-auto my-8 max-w-5xl max-h-full overflow-hidden relative;
  }
  
  .modal-header {
    @apply px-6 py-4 bg-white border-b border-gray-200 flex justify-between items-center;
  }
  
  .modal-close {
    @apply text-gray-400 hover:text-gray-500;
  }
  
  .modal-body {
    @apply px-6 py-4 max-h-[calc(100vh-200px)] overflow-y-auto;
  }
  
  .modal-footer {
    @apply px-6 py-4 bg-gray-50 border-t border-gray-200 flex justify-end space-x-3;
  }
  
  .th-cell {
    @apply px-4 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider;
  }
  
  .td-cell {
    @apply px-4 py-3 whitespace-nowrap text-sm;
  }
  
  .pagination {
    @apply flex justify-between items-center py-3 px-4 bg-white border-t border-gray-200 sm:px-6;
  }
  
  .pagination-info {
    @apply text-sm text-gray-700;
  }
  
  .pagination-controls {
    @apply flex space-x-1;
  }
  
  .pagination-btn {
    @apply relative inline-flex items-center px-3 py-1 border border-gray-300 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50;
  }
  
  .pagination-btn.active {
    @apply bg-blue-50 text-blue-600 border-blue-500;
  }
  
  .pagination-btn.disabled {
    @apply opacity-50 cursor-not-allowed bg-gray-100;
  }
  
  .pagination-ellipsis {
    @apply px-3 py-1 text-gray-500;
  }
  
  .user-avatar {
    @apply flex-shrink-0 h-10 w-10 rounded-full overflow-hidden bg-gray-200 flex items-center justify-center;
  }
  
  .avatar-placeholder {
    @apply text-sm font-semibold text-gray-600;
  }
  
  .role-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }
  
  .role-admin {
    @apply bg-purple-100 text-purple-800;
  }
  
  .role-user {
    @apply bg-blue-100 text-blue-800;
  }
  
  .metrics-grid {
    @apply grid grid-cols-2 gap-1 text-center;
  }
  
  .metric-item {
    @apply px-1;
  }
  
  .metric-value {
    @apply text-sm font-semibold text-gray-900;
  }
  
  .metric-label {
    @apply text-xs text-gray-500;
  }
  
  .action-btn {
    @apply p-1 text-gray-500 hover:text-blue-600 focus:outline-none;
  }
  
  .spinner {
    @apply w-8 h-8 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto;
  }
  
  .user-profile-header {
    @apply flex flex-col sm:flex-row items-center sm:items-start space-y-4 sm:space-y-0 sm:space-x-6 mb-6;
  }
  
  .user-avatar-large {
    @apply h-24 w-24 rounded-full overflow-hidden bg-gray-200 flex items-center justify-center;
  }
  
  .avatar-placeholder-large {
    @apply text-2xl font-semibold text-gray-600;
  }
  
  .user-info {
    @apply flex-1 text-center sm:text-left;
  }
  
  .divider {
    @apply my-6 border-t border-gray-200;
  }
  
  .section-title {
    @apply text-lg font-medium text-gray-800 mb-3;
  }
  
  .detail-group {
    @apply mb-3;
  }
  
  .detail-label {
    @apply text-sm text-gray-500 mb-1;
  }
  
  .detail-value {
    @apply text-sm font-medium text-gray-800;
  }
  
  .user-details-section {
    @apply bg-gray-50 p-4 rounded-md;
  }
  
  .user-stats-grid {
    @apply grid grid-cols-2 gap-3;
  }
  
  .user-stat-card {
    @apply bg-white p-3 rounded-md shadow-sm text-center;
  }
  
  .stat-number {
    @apply text-xl font-semibold text-gray-800;
  }
  
  .stat-label {
    @apply text-xs text-gray-500;
  }
  
  .certification-progress-list {
    @apply space-y-3;
  }
  
  .certification-progress-item {
    @apply bg-white p-3 rounded-md border border-gray-200 hover:shadow-sm transition-shadow;
  }
  
  .progress-header {
    @apply flex justify-between items-center mb-2;
  }
  
  .progress-title {
    @apply text-sm font-medium text-gray-800;
  }
  
  .progress-bar-container {
    @apply w-full bg-gray-200 rounded-full h-2;
  }
  
  .progress-bar-fill {
    @apply h-2 rounded-full;
  }
  
  .progress-stats {
    @apply flex justify-between text-xs text-gray-500 mt-1;
  }
  
  .recent-activity-list {
    @apply space-y-3;
  }
  
  .activity-item {
    @apply flex space-x-3 py-2;
  }
  
  .activity-icon {
    @apply h-8 w-8 rounded-full flex items-center justify-center flex-shrink-0;
  }
  
  .activity-content {
    @apply flex-1;
  }
  
  .activity-title {
    @apply text-sm font-medium text-gray-800;
  }
  
  .activity-meta {
    @apply text-xs text-gray-500;
  }
  
  .hidden {
    @apply hidden;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // DOM elements
    const userModal = document.getElementById('user-modal');
    const roleModal = document.getElementById('role-modal');
    
    // Button event listeners
    document.getElementById('close-modal').addEventListener('click', closeUserModal);
    document.getElementById('close-user-details').addEventListener('click', closeUserModal);
    document.getElementById('close-role-modal').addEventListener('click', closeRoleModal);
    document.getElementById('cancel-role-change').addEventListener('click', closeRoleModal);
    document.getElementById('confirm-role-change').addEventListener('click', handleRoleChange);
    
    // Add click handlers for user-related buttons
    document.querySelectorAll('.view-user').forEach(btn => {
      btn.addEventListener('click', () => viewUserDetails(btn.dataset.id));
    });
    
    document.querySelectorAll('.promote-user, .demote-user').forEach(btn => {
      btn.addEventListener('click', () => confirmRoleChange(
        btn.dataset.id, 
        btn.dataset.username,
        btn.dataset.role
      ));
    });
    
    // View user details
    function viewUserDetails(userId) {
      // Show loading state
      userModal.classList.remove('hidden');
      document.getElementById('user-loading').classList.remove('hidden');
      document.getElementById('user-content').classList.add('hidden');
      
      // Set view attempts link
      document.getElementById('view-user-attempts').href = `/admin/analytics/user/${userId}/attempts`;
      document.getElementById('user-analytics-link').href = `/admin/analytics/user/${userId}`;
      
      // Fetch user data
      fetch(`/admin/users/${userId}`)
        .then(response => response.json())
        .then(data => {
          // Hide loading state
          document.getElementById('user-loading').classList.add('hidden');
          
          if (data.success) {
            // Populate user details
            populateUserDetails(data.user);
            document.getElementById('user-content').classList.remove('hidden');
          } else {
            showAlert('Error loading user details', 'error');
            closeUserModal();
          }
        })
        .catch(error => {
          console.error('Error fetching user details:', error);
          showAlert('Error loading user details', 'error');
          closeUserModal();
        });
    }
    
    // Confirm role change
    function confirmRoleChange(userId, username, newRole) {
      document.getElementById('role-modal-title').textContent = 
        newRole === 'admin' ? 'Promote to Admin' : 'Demote to User';
      
      const message = newRole === 'admin' 
        ? `Are you sure you want to promote ${username} to Admin? They will have full access to the admin panel and all system functions.`
        : `Are you sure you want to demote ${username} to regular User? They will lose access to the admin panel.`;
      
      document.getElementById('role-change-message').textContent = message;
      document.getElementById('confirm-role-change').dataset.userId = userId;
      document.getElementById('confirm-role-change').dataset.role = newRole;
      
      roleModal.classList.remove('hidden');
    }
    
    // Handle role change
    function handleRoleChange() {
      const userId = document.getElementById('confirm-role-change').dataset.userId;
      const newRole = document.getElementById('confirm-role-change').dataset.role;
      
      fetch('/admin/users/role', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,
          role: newRole
        })
      })
      .then(response => response.json())
      .then(data => {
        closeRoleModal();
        
        if (data.success) {
          showAlert(`User role updated successfully`, 'success');
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showAlert(data.message || 'Error updating user role', 'error');
        }
      })
      .catch(error => {
        console.error('Error updating user role:', error);
        showAlert('Error updating user role', 'error');
        closeRoleModal();
      });
    }
    
    // Modal control functions
    function closeUserModal() {
      userModal.classList.add('hidden');
    }
    
    function closeRoleModal() {
      roleModal.classList.add('hidden');
    }
    
    // Show alert notification
    function showAlert(message, type = 'info') {
      // Create alert element if it doesn't exist
      let alertContainer = document.getElementById('alert-container');
      if (!alertContainer) {
        alertContainer = document.createElement('div');
        alertContainer.id = 'alert-container';
        alertContainer.className = 'fixed top-4 right-4 z-50 flex flex-col space-y-2';
        document.body.appendChild(alertContainer);
      }
      
      // Create alert
      const alert = document.createElement('div');
      alert.className = `alert alert-${type} transform transition-all duration-300 translate-x-full`;
      alert.innerHTML = `
        <div class="flex items-center">
          <div class="flex-shrink-0">
            ${type === 'success' ? 
              '<i class="fas fa-check-circle text-green-500"></i>' : 
              type === 'error' ? 
              '<i class="fas fa-exclamation-circle text-red-500"></i>' :
              '<i class="fas fa-info-circle text-blue-500"></i>'
            }
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium">${message}</p>
          </div>
          <div class="ml-auto pl-3">
            <button class="alert-close">
              <i class="fas fa-times text-gray-400 hover:text-gray-500"></i>
            </button>
          </div>
        </div>
      `;
      
      // Add alert styles based on type
      if (type === 'success') {
        alert.classList.add('bg-green-50', 'border-green-100', 'text-green-800');
      } else if (type === 'error') {
        alert.classList.add('bg-red-50', 'border-red-100', 'text-red-800');
      } else if (type === 'warning') {
        alert.classList.add('bg-yellow-50', 'border-yellow-100', 'text-yellow-800');
      } else {
        alert.classList.add('bg-blue-50', 'border-blue-100', 'text-blue-800');
      }
      
      // Add base alert styles
      alert.classList.add('rounded-md', 'p-4', 'border', 'shadow-md', 'w-80');
      
      // Add to container
      alertContainer.appendChild(alert);
      
      // Animate in
      setTimeout(() => {
        alert.classList.remove('translate-x-full');
      }, 10);
      
      // Add close handler
      alert.querySelector('.alert-close').addEventListener('click', () => {
        alert.classList.add('translate-x-full');
        setTimeout(() => {
          alert.remove();
        }, 300);
      });
      
      // Auto dismiss after 5 seconds
      setTimeout(() => {
        if (alert.parentNode) {
          alert.classList.add('translate-x-full');
          setTimeout(() => {
            alert.remove();
          }, 300);
        }
      }, 5000);
    }
    
    // Populate user details in modal
    function populateUserDetails(user) {
      // Basic info
      document.getElementById('user-fullname').textContent = user.profile?.name || user.username;
      document.getElementById('user-username').textContent = `@${user.username}`;
      document.getElementById('user-email').textContent = user.email;
      document.getElementById('user-avatar-placeholder').textContent = 
        (user.profile?.name || user.username).substring(0, 2).toUpperCase();
      
      // Role badge
      const roleBadge = document.getElementById('user-role-badge');
      roleBadge.textContent = user.role === 'admin' ? 'Admin' : 'User';
      roleBadge.className = `role-badge role-${user.role}`;
      
      // Account info
      document.getElementById('user-created').textContent = new Date(user.createdAt).toLocaleString();
      document.getElementById('user-last-login').textContent = user.lastLogin ? 
        new Date(user.lastLogin).toLocaleString() : 'Never';
      document.getElementById('user-status').textContent = 'Active';
      document.getElementById('user-proctor-settings').textContent = 
        user.settings?.proctorEnabled === false ? 'Disabled' : 'Enabled';
      
      // Statistics
      document.getElementById('user-stat-attempts').textContent = user.metrics?.totalAttempts || 0;
      document.getElementById('user-stat-passed').textContent = user.metrics?.examsPassed || 0;
      document.getElementById('user-stat-score').textContent = 
        user.metrics?.averageScore ? `${Math.round(user.metrics.averageScore)}%` : '0%';
      document.getElementById('user-stat-time').textContent = formatTimeDisplay(user.metrics?.totalTimeSpent || 0);
      
      // Certification progress
      populateCertificationProgress(user.certificationProgress);
      
      // Recent activity
      populateRecentActivity(user.recentActivity);
    }
    
    // Populate certification progress section
    function populateCertificationProgress(progressData) {
      const container = document.getElementById('certification-progress-container');
      const emptyState = document.getElementById('no-certifications');
      
      container.innerHTML = '';
      
      if (!progressData || progressData.length === 0) {
        container.classList.add('hidden');
        emptyState.classList.remove('hidden');
        return;
      }
      
      container.classList.remove('hidden');
      emptyState.classList.add('hidden');
      
      progressData.forEach(progress => {
        const progressElement = document.createElement('div');
        progressElement.className = 'certification-progress-item';
        
        // Determine progress color
        const progressColor = progress.bestScore >= 72 ? 'bg-green-500' : 'bg-blue-500';
        
        progressElement.innerHTML = `
          <div class="progress-header">
            <div class="progress-title">${progress.certification.name}</div>
            <div class="text-sm font-semibold ${progress.bestScore >= 72 ? 'text-green-600' : 'text-gray-700'}">
              ${progress.bestScore.toFixed(1)}%
            </div>
          </div>
          <div class="progress-bar-container">
            <div class="progress-bar-fill ${progressColor}" style="width: ${progress.bestScore}%"></div>
          </div>
          <div class="progress-stats">
            <span>${progress.attemptsCount} attempts</span>
            <span>Last: ${new Date(progress.lastAttemptDate).toLocaleDateString()}</span>
          </div>
        `;
        
        container.appendChild(progressElement);
      });
    }
    
    // Populate recent activity section
    // Format time for display
    function formatTimeDisplay(seconds) {
      if (!seconds) return '0h';
      
      const hours = Math.floor(seconds / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      
      if (hours > 0) {
        return `${hours}h ${minutes}m`;
      } else {
        return `${minutes}m`;
      }
    }
    
    // Format time ago for activity display
    function formatTimeAgo(date) {
      const now = new Date();
      const diffMs = now - date;
      const diffSeconds = Math.floor(diffMs / 1000);
      const diffMinutes = Math.floor(diffSeconds / 60);
      const diffHours = Math.floor(diffMinutes / 60);
      const diffDays = Math.floor(diffHours / 24);
      
      if (diffDays > 0) {
        return diffDays === 1 ? 'Yesterday' : `${diffDays} days ago`;
      } else if (diffHours > 0) {
        return `${diffHours} ${diffHours === 1 ? 'hour' : 'hours'} ago`;
      } else if (diffMinutes > 0) {
        return `${diffMinutes} ${diffMinutes === 1 ? 'minute' : 'minutes'} ago`;
      } else {
        return 'Just now';
      }
    }
    
    function populateRecentActivity(activityData) {
      const container = document.getElementById('recent-activity-container');
      const emptyState = document.getElementById('no-activity');
      
      container.innerHTML = '';
      
      if (!activityData || activityData.length === 0) {
        container.classList.add('hidden');
        emptyState.classList.remove('hidden');
        return;
      }
      
      container.classList.remove('hidden');
      emptyState.classList.add('hidden');
      
      // Mock activity data since we don't have it in the response
      const mockActivities = [
        {
          type: 'exam_attempt',
          title: 'Completed AWS Solutions Architect Practice Exam',
          score: 78,
          passed: true,
          timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000)
        },
        {
          type: 'login',
          title: 'Logged in',
          timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000)
        },
        {
          type: 'exam_attempt',
          title: 'Completed Terraform Associate Practice Exam',
          score: 65,
          passed: false,
          timestamp: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
        }
      ];
      
      mockActivities.forEach(activity => {
        const activityElement = document.createElement('div');
        activityElement.className = 'activity-item';
        
        let iconClass, iconBg, iconColor;
        
        if (activity.type === 'exam_attempt') {
          iconClass = activity.passed ? 'fa-check-circle' : 'fa-times-circle';
          iconBg = activity.passed ? 'bg-green-100' : 'bg-red-100';
          iconColor = activity.passed ? 'text-green-600' : 'text-red-600';
        } else if (activity.type === 'login') {
          iconClass = 'fa-sign-in-alt';
          iconBg = 'bg-blue-100';
          iconColor = 'text-blue-600';
        } else {
          iconClass = 'fa-bell';
          iconBg = 'bg-gray-100';
          iconColor = 'text-gray-600';
        }
        
        activityElement.innerHTML = `
          <div class="activity-icon ${iconBg}">
            <i class="fas ${iconClass} ${iconColor}"></i>
          </div>
          <div class="activity-content">
            <div class="activity-title">${activity.title}</div>
            ${activity.score !== undefined ? 
              `<div class="text-sm ${activity.passed ? 'text-green-600' : 'text-gray-700'}">
                Score: ${activity.score}%
              </div>` : ''}
            <div class="activity-meta">
              ${formatTimeAgo(activity.timestamp)}
            </div>
          </div>
        `;
        
        container.appendChild(activityElement);
      });
    }
})